// Generated by CoffeeScript 1.6.1
(function() {
  var CLIENT_ID, Event, MAP_STATUS, Place, SCOPES, TIME_ZONE_HOST, calendars, currentCalendar, geocoder, getLocalizedString, getTimeZone, handleAuthResult, initializeDOM, initializeGoogleMaps, localTime, localize, map, saveMapStatus, setLocalExpressionInto, timeDifference,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CLIENT_ID = '369757625302.apps.googleusercontent.com';

  SCOPES = ['https://www.googleapis.com/auth/calendar'];

  MAP_STATUS = 'spacetime-map-status';

  TIME_ZONE_HOST = 'http://safari-park.herokuapp.com';

  map = null;

  calendars = null;

  currentCalendar = null;

  geocoder = null;

  handleAuthResult = function(result) {
    if ((result != null) && (result.error == null)) {
      return gapi.client.load('calendar', 'v3', function() {
        $('#button-authorize').css('display', 'none');
        $('#button-calendar').css('display', '');
        return $('#modal-calendar').modal('show');
      });
    } else {
      return $('#button-authorize').text('このアプリ"SpaceTime"にGoogleカレンダーへのアクセスを許可する').attr('disabled', null).addClass('primary');
    }
  };

  getLocalizedString = function(key) {
    var _ref;
    if (typeof localizedStrings !== "undefined" && localizedStrings !== null) {
      return (_ref = localizedStrings[key]) != null ? _ref : key;
    } else {
      return key;
    }
  };

  setLocalExpressionInto = function(id, english) {
    var el;
    el = document.getElementById(id);
    if (el != null) {
      return el.lastChild.data = getLocalizedString(english);
    }
  };

  localize = function() {
    var idWordPairs, key, value, _results;
    idWordPairs = [];
    document.title = getLocalizedString('Space-Time');
    _results = [];
    for (key in idWordPairs) {
      value = idWordPairs[key];
      _results.push(setLocalExpressionInto(key, value));
    }
    return _results;
  };

  saveMapStatus = function() {
    var pos;
    pos = map.getCenter();
    return localStorage[MAP_STATUS] = JSON.stringify({
      lat: pos.lat(),
      lng: pos.lng(),
      zoom: map.getZoom()
    });
  };

  timeDifference = function(offset) {
    var offsetHours, offsetMinutes, twoDigitsFormat;
    twoDigitsFormat = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return n.toString();
      }
    };
    offsetHours = Math.floor(offset / (60 * 60));
    offsetMinutes = Math.floor(offset / 60 - offsetHours * 60);
    return (offset >= 0 ? '+' : '-') + twoDigitsFormat(offsetHours) + twoDigitsFormat(offsetMinutes);
  };

  localTime = function(date, offset) {
    return new Date(date.getTime() + offset * 1000).toISOString().replace(/\..*Z/, timeDifference(offset));
  };

  getTimeZone = function(date, position, callback) {
    var location, timestamp;
    if (getTimeZone.overQueryLimit) {
      return false;
    }
    location = "" + (position.lat()) + "," + (position.lng());
    timestamp = Math.floor(date.getTime() / 1000);
    return $.getJSON("" + TIME_ZONE_HOST + "/timezone/json?location=" + location + "&timestamp=" + timestamp + "&sensor=false&callback=?", function(obj) {
      switch (obj.status) {
        case 'OK':
          return callback(obj);
        case 'OVER_QUERY_LIMIT':
          timeZone.overQueryLimit = true;
          setTimeout((function() {
            return timeZone.overQueryLimit = false;
          }), 10000);
          return alert(obj.status);
        default:
          return console.error(obj);
      }
    });
  };

  getTimeZone.overQueryLimit = false;

  Place = (function(_super) {

    __extends(Place, _super);

    Place.$modalInfo = $('#modal-info');

    Place.modalPlace = null;

    function Place(options, event, address) {
      var _this = this;
      this.event = event;
      this.address = address != null ? address : null;
      this.showInfo = function() {
        return Place.prototype.showInfo.apply(_this, arguments);
      };
      Place.__super__.constructor.call(this, options);
      google.maps.event.addListener(this, 'click', this.showInfo);
    }

    Place.prototype.getDateTime = function(startOrEnd) {
      var dateTime, time, _ref;
      dateTime = (_ref = this.event.resource[startOrEnd].dateTime) != null ? _ref : this.event.resource[startOrEnd].date + 'T00:00:00';
      if (this["" + startOrEnd + "TimeZone"] != null) {
        time = localTime(new Date(dateTime), this["" + startOrEnd + "TimeZone"].dstOffset + this["" + startOrEnd + "TimeZone"].rawOffset);
        return {
          date: time.replace(/T.*/, ''),
          time: time.replace(/.*T|[Z+-].*/g, '')
        };
      } else {
        return {
          date: dateTime.replace(/T.*/, ''),
          time: dateTime.replace(/.*T|[Z+-].*/g, '')
        };
      }
    };

    Place.prototype.showInfo = function() {
      this._setInfo();
      return Place.$modalInfo.modal('show');
    };

    Place.prototype._setInfo = function() {
      var _this = this;
      Place.modalPlace = this;
      Place.$modalInfo.find('input[name="summary"]').val(this.event.resource.summary);
      Place.$modalInfo.find('input[name="location"]').val(this.event.resource.location);
      if ((this.event.resource.start.date != null) && (this.event.resource.end.date != null)) {
        $('#form-event input[name="all-day"]')[0].checked = true;
        $('#form-event input[name="all-day"]').trigger('change');
        Place.$modalInfo.find('input[name="start-date"]').val(this.event.resource.start.date);
        Place.$modalInfo.find('input[name="end-date"]').val(this.event.resource.end.date);
      } else if ((this.event.resource.start.dateTime != null) && (this.event.resource.end.dateTime != null)) {
        $('#form-event input[name="all-day"]')[0].checked = false;
        $('#form-event input[name="all-day"]').trigger('change');
        getTimeZone(new Date(this.event.resource.start.dateTime), this.getPosition(), function(obj) {
          var dateTime;
          _this.startTimeZone = obj;
          dateTime = _this.getDateTime('start');
          Place.$modalInfo.find('input[name="start-date"]').val(dateTime.date);
          return Place.$modalInfo.find('input[name="start-time"]').val(dateTime.time);
        });
        getTimeZone(new Date(this.event.resource.end.dateTime), this.getPosition(), function(obj) {
          var dateTime;
          _this.endTimeZone = obj;
          dateTime = _this.getDateTime('end');
          Place.$modalInfo.find('input[name="end-date"]').val(dateTime.date);
          return Place.$modalInfo.find('input[name="end-time"]').val(dateTime.time);
        });
      } else {
        console.error('inconsistent start and end');
      }
      if (this.address) {
        $('#candidate').css('display', 'block');
        $('#candidate-address').text(this.address);
      } else {
        $('#candidate').css('display', 'none');
      }
      return Place.$modalInfo.find('input[name="description"]').val(this.event.resource.description);
    };

    return Place;

  })(google.maps.Marker);

  Event = (function() {

    Event.events = [];

    Event.mark = 'A';

    Event.geocodeCount = 0;

    Event.shadow = {
      url: 'http://www.google.com/mapfiles/shadow50.png',
      anchor: new google.maps.Point(10, 34)
    };

    Event.clearAll = function() {
      var e, _i, _len, _ref, _ref1;
      _ref = Event.events;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if ((_ref1 = e.place) != null) {
          _ref1.setMap(null);
        }
        e.clearCandidates();
      }
      Event.events = [];
      return Event.mark = 'A';
    };

    function Event(calendarId, resource, centering) {
      var _base, _base1, _base2, _base3, _base4, _ref, _ref1, _ref2, _ref3, _ref4;
      this.calendarId = calendarId;
      this.resource = resource;
      if (centering == null) {
        centering = false;
      }
      if ((_ref = (_base = this.resource).summary) == null) {
        _base.summary = '新しい予定';
      }
      if ((_ref1 = (_base1 = this.resource).location) == null) {
        _base1.location = '';
      }
      if ((_ref2 = (_base2 = this.resource).description) == null) {
        _base2.description = '';
      }
      if ((_ref3 = (_base3 = this.resource).start) == null) {
        _base3.start = {
          dateTime: new Date().toISOString()
        };
      }
      if ((_ref4 = (_base4 = this.resource).end) == null) {
        _base4.end = {
          dateTime: new Date().toISOString()
        };
      }
      this.candidates = null;
      if ((this.latLng() != null) || ((this.resource.location != null) && this.resource.location !== '')) {
        this.icon = {
          url: "http://www.google.com/mapfiles/marker" + Event.mark + ".png"
        };
        if (Event.mark !== 'Z') {
          Event.mark = String.fromCharCode(Event.mark.charCodeAt(0) + 1);
        }
        this.tryToSetPlace(centering);
      }
      Event.events.push(this);
    }

    Event.prototype.latLng = function() {
      var geolocation, _ref, _ref1;
      if (((_ref = this.resource.extendedProperties) != null ? (_ref1 = _ref["private"]) != null ? _ref1.geolocation : void 0 : void 0) != null) {
        geolocation = JSON.parse(this.resource.extendedProperties["private"].geolocation);
        return new google.maps.LatLng(geolocation.lat, geolocation.lng);
      } else {
        return null;
      }
    };

    Event.prototype.address = function() {
      var geolocation, _ref, _ref1;
      if (((_ref = this.resource.extendedProperties) != null ? (_ref1 = _ref["private"]) != null ? _ref1.geolocation : void 0 : void 0) != null) {
        geolocation = JSON.parse(this.resource.extendedProperties["private"].geolocation);
        return geolocation.address;
      } else {
        return null;
      }
    };

    Event.prototype.geocode = function(callback) {
      var latLng, options,
        _this = this;
      if (Event.geocodeCount > 10) {
        console.log('too many geocoding requests');
        return false;
      }
      latLng = this.latLng();
      if (latLng != null) {
        options = {
          location: latLng
        };
      } else if (this.resource.location !== '') {
        options = {
          address: this.resource.location
        };
      } else {
        console.error('no hints for geocode');
        return;
      }
      geocoder.geocode(options, function(results, status) {
        switch (status) {
          case google.maps.GeocoderStatus.OK:
            if (results.length === 1) {
              _this.setGeolocation(results[0].geometry.location.lat(), results[0].geometry.location.lng(), results[0].formatted_address);
              _this.update();
            }
            return callback(results);
          case google.maps.GeocoderStatus.ZERO_RESULTS:
            return setTimeout((function() {
              return alert("Where is " + this.resource.location + "?");
            }), 0);
          default:
            return console.error(status);
        }
      });
      return Event.geocodeCount += 1;
    };

    Event.prototype.setPlace = function() {
      var latLng, _ref;
      latLng = this.latLng();
      if (!latLng) {
        this.place = null;
        return null;
      }
      return this.place = new Place({
        map: map,
        position: latLng,
        icon: (_ref = this.icon) != null ? _ref : null,
        shadow: this.icon != null ? Event.shadow : null,
        title: this.resource.location
      }, this);
    };

    Event.prototype.tryToSetPlace = function(centering) {
      var _this = this;
      this.setPlace();
      if ((this.place != null) && centering) {
        map.setCenter(this.place.getPosition());
      }
      if (!((this.place != null) && (this.address() != null))) {
        return this.geocode(function(results) {
          var e, _i, _len, _ref, _ref1;
          if (results.length === 1) {
            _this.setPlace();
            if (centering) {
              return map.setCenter(_this.place.getPosition());
            }
          } else {
            _this.candidates = [];
            if ((_this.latLng() != null) && !_this.address()) {
              _this.candidates.push(new Place({
                map: map,
                position: results[0].geometry.location,
                icon: (_ref = _this.icon) != null ? _ref : null,
                shadow: _this.icon != null ? Event.shadow : null,
                title: _this.resource.location + '?',
                optimized: false
              }, _this, results[0].formatted_address));
            } else {
              for (_i = 0, _len = results.length; _i < _len; _i++) {
                e = results[_i];
                _this.candidates.push(new Place({
                  map: map,
                  position: e.geometry.location,
                  icon: (_ref1 = _this.icon) != null ? _ref1 : null,
                  shadow: _this.icon != null ? Event.shadow : null,
                  title: _this.resource.location + '?',
                  optimized: false
                }, _this, e.formatted_address));
              }
            }
            setTimeout((function() {
              return $("#map img[src=\"" + _this.icon.url + "\"]").addClass('candidate');
            }), 500);
            if (centering) {
              return map.setCenter(_this.candidates[0].getPosition());
            }
          }
        });
      }
    };

    Event.prototype.setGeolocation = function(lat, lng, address) {
      var _base, _base1, _base2, _ref, _ref1, _ref2;
      if ((_ref = (_base = this.resource).extendedProperties) == null) {
        _base.extendedProperties = {};
      }
      if ((_ref1 = (_base1 = this.resource.extendedProperties)["private"]) == null) {
        _base1["private"] = {};
      }
      this.resource.extendedProperties["private"].geolocation = JSON.stringify({
        lat: lat,
        lng: lng,
        address: address
      });
      console.log(address);
      return (_ref2 = (_base2 = this.resource).location) != null ? _ref2 : _base2.location = address;
    };

    Event.prototype.update = function() {
      return gapi.client.calendar.events.update({
        calendarId: this.calendarId,
        eventId: this.resource.id,
        resource: this.resource
      }).execute(function(resp) {
        if (resp.error != null) {
          return console.error('gapi.client.calendar.events.update', resp);
        }
      });
    };

    Event.prototype.clearCandidates = function() {
      var e, _i, _len, _ref;
      if (this.candicates != null) {
        _ref = this.candidates;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          e.setMap(null);
        }
      }
      return this.candidates = null;
    };

    return Event;

  })();

  initializeDOM = function() {
    var $calendarList;
    localize();
    $('#container').css('display', '');
    $('#button-authorize').on('click', function() {
      return gapi.auth.authorize({
        'client_id': CLIENT_ID,
        'scope': SCOPES,
        'immediate': false
      }, handleAuthResult);
    });
    $calendarList = $('#calendar-list');
    $('#modal-calendar').on('show', function(event) {
      var req;
      req = gapi.client.calendar.calendarList.list();
      return req.execute(function(resp) {
        var e;
        if (resp.error != null) {
          return console.error(resp);
        } else {
          calendars = resp.items;
          return $calendarList.html('<option value="new">新規作成</option>' + ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = calendars.length; _i < _len; _i++) {
              e = calendars[_i];
              _results.push("<option value=\"" + e.id + "\">" + e.summary + "</option>");
            }
            return _results;
          })()).join(''));
        }
      });
    });
    $('#button-show').on('click', function() {
      var e, id, name, options, req, _i, _len;
      Event.clearAll();
      id = $calendarList.children('option:selected').attr('value');
      if (id === 'new') {
        if (name = prompt('新しいカレンダーに名前をつけてください')) {
          req = gapi.client.calendar.calendars.insert({
            resource: {
              summary: name
            }
          });
          return req.execute(function(resp) {
            if (resp.error != null) {
              return alert('カレンダーが作成できませんでした');
            } else {
              currentCalendar = resp.result;
              return calendars.push(currentCalendar);
            }
          });
        }
      } else {
        for (_i = 0, _len = calendars.length; _i < _len; _i++) {
          e = calendars[_i];
          if (e.id === id) {
            currentCalendar = e;
            break;
          }
        }
        options = {
          calendarId: id
        };
        if ($('#form-calendar [name="start-date"]')[0].value !== '') {
          options.timeMin = $('#form-calendar [name="start-date"]')[0].value + 'T00:00:00Z';
        }
        if ($('#form-calendar [name="end-date"]')[0].value !== '') {
          options.timeMax = $('#form-calendar [name="end-date"]')[0].value + 'T00:00:00Z';
        }
        req = gapi.client.calendar.events.list(options);
        return req.execute(function(resp) {
          var event, i, _j, _len1, _ref, _ref1, _results;
          if (resp.error != null) {
            return console.error(resp);
          } else if (((_ref = resp.items) != null ? _ref.length : void 0) > 0) {
            resp.items.sort(function(x, y) {
              var _ref1, _ref2;
              return new Date((_ref1 = x.start.dateTime) != null ? _ref1 : x.start.date + 'T00:00:00Z').getTime() - new Date((_ref2 = y.start.dateTime) != null ? _ref2 : y.start.date + 'T00:00:00Z').getTime();
            });
            Event.geocodeCount = 0;
            _ref1 = resp.items;
            _results = [];
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              e = _ref1[i];
              _results.push(event = new Event(id, e, i === 0));
            }
            return _results;
          }
        });
      }
    });
    $('#button-confirm').on('click', function() {
      var position;
      position = Place.modalPlace.getPosition();
      Place.modalPlace.event.setGeolocation(position.lat(), position.lng(), Place.modalPlace.geocodedAddress);
      Place.modalPlace.event.update();
      Place.modalPlace.event.clearCandidates();
      Place.modalPlace.event.setPlace();
      return $('#candidate').css('display', 'none');
    });
    $('#button-update').on('click', function() {
      var anEvent, endDateTime, startDateTime, timeZone, updateFlag;
      updateFlag = false;
      anEvent = Place.modalPlace.event;
      if (anEvent.resource.summary !== $('#form-event input[name="summary"]').val()) {
        updateFlag = true;
        anEvent.resource.summary = $('#form-event input[name="summary"]').val();
      }
      if (anEvent.resource.location !== $('#form-event input[name="location"]').val()) {
        updateFlag = true;
        anEvent.resource.location = $('#form-event input[name="location"]').val();
        delete anEvent.resource.extendedProperties["private"].geolocation;
      }
      if ($('#form-event input[name="all-day"]')[0].checked) {
        if (anEvent.resource.start.date !== $('#form-event input[name="start-date"]').val().replace(/-/g, '/')) {
          updateFlag = true;
          delete anEvent.resource.start.dateTime;
          anEvent.resource.start.date = $('#form-event input[name="start-date"]').val().replace(/-/g, '/');
        }
        if (anEvent.resource.end.date !== $('#form-event input[name="end-date"]').val().replace(/-/g, '/')) {
          updateFlag = true;
          delete anEvent.resource.end.dateTime;
          anEvent.resource.end.date = $('#form-event input[name="end-date"]').val().replace(/-/g, '/');
        }
      } else {
        timeZone = Place.modalPlace.startTimeZone;
        startDateTime = new Date($('#form-event input[name="start-date"]').val().replace(/-/g, '/') + ' ' + $('#form-event input[name="start-time"]').val() + timeDifference(timeZone.dstOffset + timeZone.rawOffset));
        if (new Date(anEvent.resource.start.dateTime).getTime() !== startDateTime.getTime()) {
          updateFlag = true;
          delete anEvent.resource.start.date;
          anEvent.resource.start.dateTime = startDateTime.toISOString();
          anEvent.resource.start.timeZone = timeZone.timeZoneId;
        }
        timeZone = Place.modalPlace.endTimeZone;
        endDateTime = new Date($('#form-event input[name="end-date"]').val().replace(/-/g, '/') + ' ' + $('#form-event input[name="end-time"]').val() + timeDifference(timeZone.dstOffset + timeZone.rawOffset));
        if (new Date(anEvent.resource.end.dateTime).getTime() !== endDateTime.getTime()) {
          updateFlag = true;
          delete anEvent.resource.end.date;
          anEvent.resource.end.dateTime = endDateTime.toISOString();
          anEvent.resource.end.timeZone = timeZone.timeZoneId;
        }
      }
      if (anEvent.resource.description !== $('#form-event input[name="description"]').val()) {
        updateFlag = true;
        anEvent.resource.description = $('#form-event input[name="description"]').val();
      }
      if (updateFlag) {
        return anEvent.update();
      }
    });
    return $('#form-event input[name="all-day"]').on('change', function() {
      $('#form-event input[name="start-time"]').css('display', this.checked ? 'none' : '');
      return $('#form-event input[name="end-time"]').css('display', this.checked ? 'none' : '');
    });
  };

  initializeGoogleMaps = function() {
    var mapOptions, mapStatus;
    mapOptions = {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: /iPad|iPhone/.test(navigator.userAgent),
      zoomControlOptions: {
        position: google.maps.ControlPosition.LEFT_CENTER
      },
      panControlOptions: {
        position: google.maps.ControlPosition.LEFT_CENTER
      },
      streetView: new google.maps.StreetViewPanorama(document.getElementById('streetview'), {
        panControl: false,
        zoomControl: false,
        visible: false
      })
    };
    google.maps.event.addListener(mapOptions.streetView, 'position_changed', function() {
      return map.setCenter(this.getPosition());
    });
    if (localStorage[MAP_STATUS] != null) {
      mapStatus = JSON.parse(localStorage[MAP_STATUS]);
      mapOptions.center = new google.maps.LatLng(mapStatus.lat, mapStatus.lng);
      mapOptions.zoom = mapStatus.zoom;
    } else {
      mapOptions.center = new google.maps.LatLng(35.660389, 139.729225);
      mapOptions.zoom = 14;
    }
    map = new google.maps.Map(document.getElementById('map'), mapOptions);
    map.setTilt(45);
    google.maps.event.addListener(map, 'click', function(event) {
      return new Event(currentCalendar.id, {
        extendedProperties: {
          "private": {
            geolocation: JSON.stringify({
              lat: event.latLng.lat(),
              lng: event.latLng.lng()
            })
          }
        }
      });
    });
    return geocoder = new google.maps.Geocoder();
  };

  window.app = {
    initialize: function() {
      initializeGoogleMaps();
      return initializeDOM();
    },
    saveMapStatus: saveMapStatus
  };

  window.handleClientLoad = function() {
    return setTimeout((function() {
      return gapi.auth.authorize({
        'client_id': CLIENT_ID,
        'scope': SCOPES,
        'immediate': true
      }, handleAuthResult);
    }), 1);
  };

}).call(this);
