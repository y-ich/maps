// Generated by CoffeeScript 1.6.1
(function() {
  var CLIENT_ID, Event, MAP_STATUS, Place, SCOPES, authorizeFunction, events, geocoder, getLocalizedString, handleAuthResult, handleClientLoad, initializeDOM, initializeGoogleMaps, localize, map, saveMapStatus, setLocalExpressionInto,
    _this = this;

  CLIENT_ID = '369757625302.apps.googleusercontent.com';

  SCOPES = ['https://www.googleapis.com/auth/calendar'];

  MAP_STATUS = 'spacetime-map-status';

  map = null;

  events = [];

  geocoder = null;

  handleClientLoad = function() {
    return window.setTimeout(authorizeFunction(CLIENT_ID, SCOPES, true, handleAuthResult), 1);
  };

  authorizeFunction = function(client_id, scopes, immediate, callback) {
    return function() {
      return gapi.auth.authorize({
        'client_id': client_id,
        'scope': scopes,
        'immediate': immediate
      }, callback);
    };
  };

  handleAuthResult = function(authResult) {
    if (authResult && !authResult.error) {
      console.log('ok');
      return gapi.client.load('calendar', 'v3', function() {
        $('#button-authorize').css('display', 'none');
        return $('#button-calendar').css('display', '');
      });
    } else {
      console.log('ng');
      return $('#button-authorize').text('Authorize this app').attr('disabled', null).addClass('primary');
    }
  };

  window.handleClientLoad = handleClientLoad;

  getLocalizedString = function(key) {
    var _ref;
    if (typeof localizedStrings !== "undefined" && localizedStrings !== null) {
      return (_ref = localizedStrings[key]) != null ? _ref : key;
    } else {
      return key;
    }
  };

  setLocalExpressionInto = function(id, english) {
    var el;
    el = document.getElementById(id);
    if (el != null) {
      return el.lastChild.data = getLocalizedString(english);
    }
  };

  localize = function() {
    var idWordPairs, key, value, _results;
    idWordPairs = [];
    document.title = getLocalizedString('Maps');
    _results = [];
    for (key in idWordPairs) {
      value = idWordPairs[key];
      _results.push(setLocalExpressionInto(key, value));
    }
    return _results;
  };

  saveMapStatus = function() {
    var pos;
    pos = map.getCenter();
    return localStorage[MAP_STATUS] = JSON.stringify({
      lat: pos.lat(),
      lng: pos.lng(),
      zoom: map.getZoom()
    });
  };

  Place = (function() {

    Place.$modalInfo = $('#modal-info');

    function Place(options, event, geocodedAddress) {
      var _this = this;
      this.event = event;
      this.geocodedAddress = geocodedAddress;
      this.showInfo = function() {
        return Place.prototype.showInfo.apply(_this, arguments);
      };
      this.marker = new google.maps.Marker(options);
      google.maps.event.addListener(this.marker, 'click', this.showInfo);
    }

    Place.prototype.showInfo = function() {
      this._setInfo();
      return Place.$modalInfo.modal('show');
    };

    Place.prototype._setInfo = function() {
      var _ref, _ref1, _ref2, _ref3;
      Place.$modalInfo.find('input[name="summary"]').val(this.event.summary);
      Place.$modalInfo.find('input[name="location"]').val(this.event.location);
      Place.$modalInfo.find('input[name="start-date"]').val((_ref = this.event.start.date) != null ? _ref : this.event.start.dateTime.replace(/T.*/, ''));
      Place.$modalInfo.find('input[name="start-time"]').val((_ref1 = this.event.start.dateTime) != null ? _ref1.replace(/.*T|[Z+-].*/g, '') : void 0);
      Place.$modalInfo.find('input[name="end-date"]').val((_ref2 = this.event.end.date) != null ? _ref2 : this.event.end.dateTime.replace(/T.*/, ''));
      Place.$modalInfo.find('input[name="end-time"]').val((_ref3 = this.event.end.dateTime) != null ? _ref3.replace(/.*T|[Z+-].*/g, '') : void 0);
      if (this.geocodedAddress) {
        $('#candidate').css('display', 'block');
        return $('#candidate-address').text(this.geocodedAddress);
      } else {
        return $('#candidate').css('display', 'none');
      }
    };

    return Place;

  })();

  Event = (function() {

    Event.mark = 'A';

    Event.geocodeCount = 0;

    Event.shadow = {
      url: 'http://www.google.com/mapfiles/shadow50.png',
      anchor: new google.maps.Point(10, 34)
    };

    function Event(calendarId, resource) {
      this.calendarId = calendarId;
      this.resource = resource;
      if ((this.resource.location != null) && this.resource.location !== '') {
        this.icon = {
          url: "http://www.google.com/mapfiles/marker" + Event.mark + ".png"
        };
        if (Event.mark !== 'Z') {
          Event.mark = String.fromCharCode(Event.mark.charCodeAt(0) + 1);
        }
        this.tryToSetPlace();
      }
    }

    Event.prototype.latLng = function() {
      var geolocation, _ref, _ref1;
      if (((_ref = this.resource.extendedProperties) != null ? (_ref1 = _ref["private"]) != null ? _ref1.geolocation : void 0 : void 0) != null) {
        geolocation = JSON.parse(this.resource.extendedProperties["private"].geolocation);
        return new google.maps.LatLng(geolocation.lat, geolocation.lng);
      } else {
        return null;
      }
    };

    Event.prototype.geocode = function(callback) {
      var _this = this;
      if (Event.geocodeCount > 10) {
        console.log('too many geocoding requests');
        return false;
      }
      geocoder.geocode({
        address: this.resource.location
      }, function(results, status) {
        switch (status) {
          case google.maps.GeocoderStatus.OK:
            if (results.length === 1) {
              _this._updateGeolocation(results[0].geometry.location.lat(), results[0].geometry.location.lng(), results[0].formatted_address);
            } else {
              console.log('several candicates', results);
            }
            return callback(results);
          case google.maps.GeocoderStatus.ZERO_RESULTS:
            return setTimeout((function() {
              return alert("Where is " + this.resource.location + "?");
            }), 0);
          default:
            return console.error(status);
        }
      });
      return Event.geocodeCount += 1;
    };

    Event.prototype.setPlace = function() {
      var latLng, _ref, _ref1, _ref2;
      if (!((this.resource.location != null) && this.resource.location !== '')) {
        return null;
      }
      latLng = this.latLng();
      if (!latLng) {
        return null;
      }
      console.log((_ref = (_ref1 = this.resource.start.date) != null ? _ref1 : this.resource.start.dateTime) != null ? _ref : '');
      return this.place = new Place({
        map: map,
        position: latLng,
        icon: (_ref2 = this.icon) != null ? _ref2 : null,
        shadow: this.icon != null ? Event.shadow : null,
        title: this.resource.location
      }, this.resource);
    };

    Event.prototype.tryToSetPlace = function() {
      var _this = this;
      if (!this.setPlace()) {
        return this.geocode(function(results) {
          var e, _i, _len, _ref;
          if (!_this.setPlace()) {
            _this.candidates = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              e = results[_i];
              _this.candidates.push(new Place({
                map: map,
                position: e.geometry.location,
                icon: (_ref = _this.icon) != null ? _ref : null,
                shadow: _this.icon != null ? Event.shadow : null,
                title: _this.resource.location + '?',
                optimized: false
              }, _this.resource, e.formatted_address));
            }
            return setTimeout((function() {
              return $("#map img[src=\"" + _this.icon.url + "\"]").addClass('candidate');
            }), 500);
          }
        });
      }
    };

    Event.prototype._updateGeolocation = function(lat, lng, address) {
      var _base, _base1, _ref, _ref1;
      if ((_ref = (_base = this.resource).extendedProperties) == null) {
        _base.extendedProperties = {};
      }
      if ((_ref1 = (_base1 = this.resource.extendedProperties)["private"]) == null) {
        _base1["private"] = {};
      }
      this.resource.extendedProperties["private"].geolocation = JSON.stringify({
        lat: lat,
        lng: lng,
        address: address
      });
      return gapi.client.calendar.events.update({
        calendarId: this.calendarId,
        eventId: this.resource.id,
        resource: this.resource
      }).execute(function(resp) {
        if (resp.error != null) {
          return console.error('gapi.client.calendar.events.update', resp);
        }
      });
    };

    return Event;

  })();

  initializeDOM = function() {
    var $calendarList;
    localize();
    $('#container').css('display', '');
    $('#button-authorize').on('click', authorizeFunction(CLIENT_ID, SCOPES, false, handleAuthResult));
    $calendarList = $('#calendar-list');
    $('#modal-calendar').on('show', function(event) {
      var req;
      req = gapi.client.calendar.calendarList.list();
      return req.execute(function(resp) {
        var e;
        if (resp.error != null) {
          return console.error(resp);
        } else {
          return $calendarList.html(((function() {
            var _i, _len, _ref, _results;
            _ref = resp.items;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              e = _ref[_i];
              _results.push("<option value=\"" + e.id + "\">" + e.summary + "</option>");
            }
            return _results;
          })()).join(''));
        }
      });
    });
    return $('#button-show').on('click', function(event) {
      var e, id, options, req, _i, _len, _ref;
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        e = events[_i];
        if ((_ref = e.marker) != null) {
          _ref.setMap(null);
        }
      }
      events = [];
      Event.count = 0;
      id = $calendarList.children('option:selected').attr('value');
      options = {
        calendarId: id
      };
      if ($('#form-calendar [name="start-date"]')[0].value !== '') {
        options.timeMin = $('#form-calendar [name="start-date"]')[0].value + 'T00:00:00Z';
      }
      if ($('#form-calendar [name="end-date"]')[0].value !== '') {
        options.timeMax = $('#form-calendar [name="end-date"]')[0].value + 'T00:00:00Z';
      }
      req = gapi.client.calendar.events.list(options);
      return req.execute(function(resp) {
        var _j, _len1, _ref1, _results;
        if (resp.error != null) {
          return console.error(resp);
        } else {
          console.log(resp);
          resp.items.sort(function(x, y) {
            var _ref1, _ref2;
            return new Date((_ref1 = x.start.dateTime) != null ? _ref1 : x.start.date + 'T00:00:00Z').getTime() - new Date((_ref2 = y.start.dateTime) != null ? _ref2 : y.start.date + 'T00:00:00Z').getTime();
          });
          Event.geocodeCount = 0;
          _ref1 = resp.items;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            e = _ref1[_j];
            event = new Event(id, e);
            _results.push(events.push(event));
          }
          return _results;
        }
      });
    });
  };

  initializeGoogleMaps = function() {
    var mapOptions, mapStatus;
    mapOptions = {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      streetView: new google.maps.StreetViewPanorama(document.getElementById('streetview'), {
        panControl: false,
        zoomControl: false,
        visible: false
      })
    };
    google.maps.event.addListener(mapOptions.streetView, 'position_changed', function() {
      return map.setCenter(this.getPosition());
    });
    if (localStorage[MAP_STATUS] != null) {
      mapStatus = JSON.parse(localStorage[MAP_STATUS]);
      mapOptions.center = new google.maps.LatLng(mapStatus.lat, mapStatus.lng);
      mapOptions.zoom = mapStatus.zoom;
    } else {
      mapOptions.center = new google.maps.LatLng(35.660389, 139.729225);
      mapOptions.zoom = 14;
    }
    map = new google.maps.Map(document.getElementById('map'), mapOptions);
    map.setTilt(45);
    return geocoder = new google.maps.Geocoder();
  };

  window.app = {
    initialize: function() {
      initializeGoogleMaps();
      return initializeDOM();
    },
    saveMapStatus: saveMapStatus
  };

}).call(this);
