// Generated by CoffeeScript 1.6.1
(function() {
  var CLIENT_ID, DEFAULT_ICON_SIZE, Event, MAP_STATUS, MarkerWithCircle, MobileInfoWindow, Place, SCOPES, authorizeFunction, events, geocoder, getLocalizedString, handleAuthResult, handleClientLoad, infoWindow, initializeDOM, initializeGoogleMaps, localize, map, method, name, saveMapStatus, setLocalExpressionInto, style, timeZone, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  DEFAULT_ICON_SIZE = 32;

  MobileInfoWindow = (function(_super) {

    __extends(MobileInfoWindow, _super);

    function MobileInfoWindow(options) {
      this.setOptions(options);
    }

    MobileInfoWindow.prototype.getContent = function() {
      return this.content;
    };

    MobileInfoWindow.prototype.getPosition = function() {
      return this.position;
    };

    MobileInfoWindow.prototype.getZIndex = function() {
      return this.zIndex;
    };

    MobileInfoWindow.prototype.setContent = function(content) {
      this.content = content;
      if (this.element == null) {
        this.element = document.createElement('div');
        if (this.maxWidth) {
          this.element.style['max-width'] = this.maxWidth + 'px';
        }
        this.element.className = 'info-window';
      }
      if (typeof this.content === 'string') {
        this.element.innerHTML = this.content;
      } else {
        this.element.innerHTML = '';
        this.element.appendChild(this.content);
      }
      return google.maps.event.trigger(this, 'content_changed');
    };

    MobileInfoWindow.prototype.setPosition = function(position) {
      this.position = position;
      return google.maps.event.trigger(this, 'position_changed');
    };

    MobileInfoWindow.prototype.setZIndex = function(zIndex) {
      this.zIndex = zIndex;
      this.element.style['z-index'] = this.zIndex.toString();
      return google.maps.event.trigger(this, 'zindex_changed');
    };

    MobileInfoWindow.prototype.close = function() {
      return this.setMap(null);
    };

    MobileInfoWindow.prototype.open = function(map, anchor) {
      var icon, markerAnchor, markerSize, _ref, _ref1;
      this.anchor = anchor;
      if (anchor != null) {
        this.setPosition(this.anchor.getPosition());
        icon = this.anchor.getIcon();
        if (typeof icon === 'object') {
          markerSize = (_ref = icon.size) != null ? _ref : new google.maps.Size(0, 0);
          markerAnchor = (_ref1 = icon.anchor) != null ? _ref1 : new google.maps.Point(Math.floor(markerSize.width / 2), markerSize.height);
        } else {
          markerSize = new google.maps.Size(DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
          markerAnchor = new google.maps.Point(DEFAULT_ICON_SIZE / 2, DEFAULT_ICON_SIZE);
        }
        this.pixelOffset = new google.maps.Size(Math.floor(markerSize.width / 2) - markerAnchor.x, -markerAnchor.y, 'px', 'px');
      }
      return this.setMap(map);
    };

    MobileInfoWindow.prototype.setOptions = function(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.maxWidth = (_ref = options.maxWidth) != null ? _ref : null;
      this.setContent((_ref1 = options.content) != null ? _ref1 : '');
      this.disableAutoPan = (_ref2 = options.disableAutoPan) != null ? _ref2 : null;
      this.pixelOffset = (_ref3 = options.pixelOffset) != null ? _ref3 : new google.maps.Size(0, 0, 'px', 'px');
      this.setPosition((_ref4 = options.position) != null ? _ref4 : null);
      return this.setZIndex((_ref5 = options.zIndex) != null ? _ref5 : 0);
    };

    MobileInfoWindow.prototype.onAdd = function() {
      this.getPanes().floatPane.appendChild(this.element);
      return google.maps.event.trigger(this, 'domready');
    };

    MobileInfoWindow.prototype.draw = function() {
      var xy;
      xy = this.getProjection().fromLatLngToDivPixel(this.getPosition());
      this.element.style.left = xy.x + this.pixelOffset.width - this.element.offsetWidth / 2 + 'px';
      return this.element.style.top = xy.y + this.pixelOffset.height - this.element.offsetHeight + 'px';
    };

    MobileInfoWindow.prototype.onRemove = function() {
      return this.element.parentNode.removeChild(this.element);
    };

    return MobileInfoWindow;

  })(google.maps.OverlayView);

  MarkerWithCircle = (function() {

    function MarkerWithCircle(options) {
      var _ref, _ref1, _ref2,
        _this = this;
      this.marker = new google.maps.Marker(options);
      this.pulse = new google.maps.Circle({
        center: options.position,
        clickable: false,
        map: (_ref = options.map) != null ? _ref : null,
        visible: (_ref1 = options.visible) != null ? _ref1 : true,
        zIndex: (_ref2 = options.zIndex) != null ? _ref2 : null,
        fillColor: '#06f',
        fillOpacity: 0.1,
        strokeColor: '#06f',
        strokeOpacity: 0.5,
        strokeWeight: 2
      });
      if (!((options.clickable != null) && !options.clickable)) {
        google.maps.event.addListener(this.marker, 'click', function() {
          return google.maps.event.trigger(_this, 'click');
        });
      }
    }

    MarkerWithCircle.prototype.setPosition = function(latLng) {
      this.marker.setPosition(latLng);
      return this.pulse.setCenter(latLng);
    };

    MarkerWithCircle.prototype.setVisible = function(visible) {
      this.marker.setVisible(visible);
      return this.pulse.setVisible(visible);
    };

    MarkerWithCircle.prototype.setMap = function(map) {
      this.marker.setMap(map);
      return this.pulse.setMap(map);
    };

    MarkerWithCircle.prototype.setRadius = function(radius) {
      return this.pulse.setRadius(radius);
    };

    return MarkerWithCircle;

  })();

  _ref = google.maps.Marker.prototype;
  for (name in _ref) {
    method = _ref[name];
    if (typeof method === 'function') {
      if (!MarkerWithCircle.prototype[name]) {
        MarkerWithCircle.prototype[name] = (function(name) {
          return function() {
            return this.marker[name]();
          };
        })(name);
      }
    }
  }

  style = document.createElement('style');

  style.setAttribute('type', 'text/css');

  style.innerHTML = '.info-window {\n    position: absolute;\n    color: white;\n    background-color: rgba(0,0,0,0.5);\n    border-radius: 5px;\n    padding: 4px;\n}\n\n.info-window button {\n    width: 20px;\n    height: 20px;\n    padding: 0;\n    border-radius: 10px;\n    border: 1px solid white;\n}\n\n.info-window .button-wrapper {\n    position: absolute;\n    width: 25px;\n    height: 100%;\n    top: -1px;\n}\n\n.info-window .button-wrapper.wrapper-left {\n    left: 0;\n}\n\n.info-window .button-wrapper.wrapper-right {\n    right: 0;\n}';

  document.head.appendChild(style);

  CLIENT_ID = '369757625302.apps.googleusercontent.com';

  SCOPES = ['https://www.googleapis.com/auth/calendar'];

  MAP_STATUS = 'spacetime-map-status';

  map = null;

  infoWindow = null;

  events = [];

  geocoder = null;

  handleClientLoad = function() {
    return window.setTimeout(authorizeFunction(CLIENT_ID, SCOPES, true, handleAuthResult), 1);
  };

  authorizeFunction = function(client_id, scopes, immediate, callback) {
    return function() {
      return gapi.auth.authorize({
        'client_id': client_id,
        'scope': scopes,
        'immediate': immediate
      }, callback);
    };
  };

  handleAuthResult = function(authResult) {
    if (authResult && !authResult.error) {
      console.log('ok');
      return gapi.client.load('calendar', 'v3', function() {
        $('#button-authorize').css('display', 'none');
        return $('#button-calendar').css('display', '');
      });
    } else {
      console.log('ng');
      return $('#button-authorize').text('Authorize this app').attr('disabled', null).addClass('primary');
    }
  };

  window.handleClientLoad = handleClientLoad;

  getLocalizedString = function(key) {
    var _ref1;
    if (typeof localizedStrings !== "undefined" && localizedStrings !== null) {
      return (_ref1 = localizedStrings[key]) != null ? _ref1 : key;
    } else {
      return key;
    }
  };

  setLocalExpressionInto = function(id, english) {
    var el;
    el = document.getElementById(id);
    if (el != null) {
      return el.lastChild.data = getLocalizedString(english);
    }
  };

  localize = function() {
    var idWordPairs, key, value, _results;
    idWordPairs = [];
    document.title = getLocalizedString('Maps');
    _results = [];
    for (key in idWordPairs) {
      value = idWordPairs[key];
      _results.push(setLocalExpressionInto(key, value));
    }
    return _results;
  };

  saveMapStatus = function() {
    var pos;
    pos = map.getCenter();
    return localStorage[MAP_STATUS] = JSON.stringify({
      lat: pos.lat(),
      lng: pos.lng(),
      zoom: map.getZoom()
    });
  };

  timeZone = function(calendarId) {};

  Place = (function() {

    function Place(options, content) {
      var _this = this;
      this.content = content;
      this.showInfoWindow = function() {
        return Place.prototype.showInfoWindow.apply(_this, arguments);
      };
      this.marker = new google.maps.Marker(options);
      google.maps.event.addListener(this.marker, 'click', this.showInfoWindow);
    }

    Place.prototype.showInfoWindow = function() {
      this._setInfoWindow();
      return infoWindow.open(this.marker.getMap(), this.marker);
    };

    Place.prototype._setInfoWindow = function() {
      return infoWindow.setContent(this.content);
    };

    return Place;

  })();

  Event = (function() {

    Event.mark = 'A';

    Event.geocodeCount = 0;

    Event.shadow = {
      url: 'http://www.google.com/mapfiles/shadow50.png',
      anchor: new google.maps.Point(10, 34)
    };

    function Event(calendarId, resource) {
      this.calendarId = calendarId;
      this.resource = resource;
      if ((this.resource.location != null) && this.resource.location !== '') {
        this.icon = {
          url: "http://www.google.com/mapfiles/marker" + Event.mark + ".png"
        };
        if (Event.mark !== 'Z') {
          Event.mark = String.fromCharCode(Event.mark.charCodeAt(0) + 1);
        }
        this.tryToSetPlace();
      }
    }

    Event.prototype.latLng = function() {
      var geolocation, _ref1, _ref2;
      if (((_ref1 = this.resource.extendedProperties) != null ? (_ref2 = _ref1["private"]) != null ? _ref2.geolocation : void 0 : void 0) != null) {
        geolocation = JSON.parse(this.resource.extendedProperties["private"].geolocation);
        return new google.maps.LatLng(geolocation.lat, geolocation.lng);
      } else {
        return null;
      }
    };

    Event.prototype.geocode = function(callback) {
      var _this = this;
      if (Event.geocodeCount > 10) {
        console.log('too many geocoding requests');
        return false;
      }
      geocoder.geocode({
        address: this.resource.location
      }, function(results, status) {
        switch (status) {
          case google.maps.GeocoderStatus.OK:
            if (results.length === 1) {
              _this._updateGeolocation(results[0].geometry.location.lat(), results[0].geometry.location.lng(), results[0].formatted_address);
            } else {
              console.log('several candicates', results);
            }
            return callback(results);
          case google.maps.GeocoderStatus.ZERO_RESULTS:
            return setTimeout((function() {
              return alert("Where is " + this.resource.location + "?");
            }), 0);
          default:
            return console.error(status);
        }
      });
      return Event.geocodeCount += 1;
    };

    Event.prototype.setPlace = function() {
      var latLng, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (!((this.resource.location != null) && this.resource.location !== '')) {
        return null;
      }
      latLng = this.latLng();
      if (!latLng) {
        return null;
      }
      return this.place = new Place({
        map: map,
        position: latLng,
        icon: (_ref1 = this.icon) != null ? _ref1 : null,
        shadow: this.icon != null ? Event.shadow : null,
        title: this.resource.location
      }, "<h5>" + this.resource.summary + "</h5>\n<dl class=\"dl-horizontal\">\n    <dt>Location</dt>\n    <dd>" + ((_ref2 = this.resource.location) != null ? _ref2 : '') + "</dd>\n    <dt>Start</dt>\n    <dd>" + ((((_ref3 = this.resource.start.date) != null ? _ref3 : this.resource.start.dateTime) & '') + ((_ref4 = this.resource.start.timeZone) != null ? _ref4 : timeZone(this.calendarId))) + "</dd>\n    <dt>End</dt>\n    <dd>" + ((((_ref5 = this.resource.end.date) != null ? _ref5 : this.resource.end.dateTime) & '') + ((_ref6 = this.resource.start.timeZone) != null ? _ref6 : timeZone(this.calendarId))) + "</dd>\n    <dt>Description</dt>\n    <dd>" + ((_ref7 = this.resource.description) != null ? _ref7 : '') + "</dd>\n</dl>");
    };

    Event.prototype.tryToSetPlace = function() {
      var _this = this;
      if (!this.setPlace()) {
        return this.geocode(function(results) {
          var e, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
          if (!_this.setPlace()) {
            _this.candidates = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              e = results[_i];
              _this.candidates.push(new Place({
                map: map,
                position: e.geometry.location,
                icon: (_ref1 = _this.icon) != null ? _ref1 : null,
                shadow: _this.icon != null ? Event.shadow : null,
                title: _this.resource.location + '?',
                optimized: false
              }, "<h5>" + _this.resource.summary + "</h5>\n<dl class=\"dl-horizontal\">\n    <dt>Location</dt>\n    <dd>" + ((_ref2 = _this.resource.location) != null ? _ref2 : '') + "</dd>\n    <dt>Here is</dt>\n    <dd>" + e.formatted_address + "</dd>\n    <dt>Start</dt>\n    <dd>" + ((((_ref3 = _this.resource.start.date) != null ? _ref3 : _this.resource.start.dateTime) & '') + ((_ref4 = _this.resource.start.timeZone) != null ? _ref4 : timeZone(_this.calendarId))) + "</dd>\n    <dt>End</dt>\n    <dd>" + ((((_ref5 = _this.resource.end.date) != null ? _ref5 : _this.resource.end.dateTime) & '') + ((_ref6 = _this.resource.start.timeZone) != null ? _ref6 : timeZone(_this.calendarId))) + "</dd>\n    <dt>Description</dt>\n    <dd>" + ((_ref7 = _this.resource.description) != null ? _ref7 : '') + "</dd>\n</dl>"));
            }
            return setTimeout((function() {
              return $("#map img[src=\"" + _this.icon.url + "\"]").addClass('candidate');
            }), 500);
          }
        });
      }
    };

    Event.prototype._updateGeolocation = function(lat, lng, address) {
      var _base, _base1, _ref1, _ref2;
      if ((_ref1 = (_base = this.resource).extendedProperties) == null) {
        _base.extendedProperties = {};
      }
      if ((_ref2 = (_base1 = this.resource.extendedProperties)["private"]) == null) {
        _base1["private"] = {};
      }
      this.resource.extendedProperties["private"].geolocation = JSON.stringify({
        lat: lat,
        lng: lng,
        address: address
      });
      return gapi.client.calendar.events.update({
        calendarId: this.calendarId,
        eventId: this.resource.id,
        resource: this.resource
      }).execute(function(resp) {
        if (resp.error != null) {
          return console.error('gapi.client.calendar.events.update', resp);
        }
      });
    };

    return Event;

  })();

  initializeDOM = function() {
    var $calendarList;
    localize();
    $('#container').css('display', '');
    $('#button-authorize').on('click', authorizeFunction(CLIENT_ID, SCOPES, false, handleAuthResult));
    $calendarList = $('#calendar-list');
    $('#modal-calendar').on('show', function(event) {
      var req;
      req = gapi.client.calendar.calendarList.list();
      return req.execute(function(resp) {
        var e;
        if (resp.error != null) {
          return console.error(resp);
        } else {
          return $calendarList.html(((function() {
            var _i, _len, _ref1, _results;
            _ref1 = resp.items;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              e = _ref1[_i];
              _results.push("<option value=\"" + e.id + "\">" + e.summary + "</option>");
            }
            return _results;
          })()).join(''));
        }
      });
    });
    return $('#button-show').on('click', function(event) {
      var e, id, options, req, _i, _len, _ref1;
      infoWindow.setMap(null);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        e = events[_i];
        if ((_ref1 = e.marker) != null) {
          _ref1.setMap(null);
        }
      }
      events = [];
      Event.count = 0;
      id = $calendarList.children('option:selected').attr('value');
      options = {
        calendarId: id
      };
      if ($('#form-calendar [name="start-date"]')[0].value !== '') {
        options.timeMin = $('#form-calendar [name="start-date"]')[0].value + 'T00:00:00Z';
      }
      if ($('#form-calendar [name="end-date"]')[0].value !== '') {
        options.timeMax = $('#form-calendar [name="end-date"]')[0].value + 'T00:00:00Z';
      }
      req = gapi.client.calendar.events.list(options);
      return req.execute(function(resp) {
        var _j, _len1, _ref2, _results;
        if (resp.error != null) {
          return console.error(resp);
        } else {
          resp.items.sort(function(x, y) {
            var _ref2, _ref3;
            return new Date((_ref2 = x.start.dateTime) != null ? _ref2 : x.start.date + 'T00:00:00Z').getTime() - new Date((_ref3 = y.start.dateTime) != null ? _ref3 : y.start.date + 'T00:00:00Z').getTime();
          });
          Event.geocodeCount = 0;
          _ref2 = resp.items;
          _results = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            e = _ref2[_j];
            event = new Event(id, e);
            _results.push(events.push(event));
          }
          return _results;
        }
      });
    });
  };

  initializeGoogleMaps = function() {
    var mapOptions, mapStatus;
    mapOptions = {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      streetView: new google.maps.StreetViewPanorama(document.getElementById('streetview'), {
        panControl: false,
        zoomControl: false,
        visible: false
      })
    };
    google.maps.event.addListener(mapOptions.streetView, 'position_changed', function() {
      return map.setCenter(this.getPosition());
    });
    if (localStorage[MAP_STATUS] != null) {
      mapStatus = JSON.parse(localStorage[MAP_STATUS]);
      mapOptions.center = new google.maps.LatLng(mapStatus.lat, mapStatus.lng);
      mapOptions.zoom = mapStatus.zoom;
    } else {
      mapOptions.center = new google.maps.LatLng(35.660389, 139.729225);
      mapOptions.zoom = 14;
    }
    map = new google.maps.Map(document.getElementById('map'), mapOptions);
    map.setTilt(45);
    infoWindow = new MobileInfoWindow({
      maxWidth: Math.floor(innerWidth * 0.9)
    });
    google.maps.event.addListener(map, 'mousedown', function(event) {
      var $infoWindow, position, xy, _ref1, _ref2;
      $infoWindow = $('.info-window');
      if ($infoWindow.length > 0) {
        xy = infoWindow.getProjection().fromLatLngToDivPixel(event.latLng);
        position = $infoWindow.position();
        if (((position.left <= (_ref1 = xy.x) && _ref1 <= position.left + $infoWindow.outerWidth(true))) && ((position.top <= (_ref2 = xy.y) && _ref2 <= position.top + $infoWindow.outerHeight(true)))) {
          return;
        }
      }
      return infoWindow.close();
    });
    return geocoder = new google.maps.Geocoder();
  };

  window.app = {
    initialize: function() {
      initializeGoogleMaps();
      return initializeDOM();
    },
    saveMapStatus: saveMapStatus
  };

}).call(this);
