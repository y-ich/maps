// Generated by CoffeeScript 1.6.1
(function() {
  var MarkerWithCircle, MobileInfoWindow, method, name, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MobileInfoWindow = (function(_super) {

    __extends(MobileInfoWindow, _super);

    function MobileInfoWindow(options) {
      this.setOptions(options);
    }

    MobileInfoWindow.prototype.getContent = function() {
      return this.content;
    };

    MobileInfoWindow.prototype.getPosition = function() {
      return this.position;
    };

    MobileInfoWindow.prototype.getZIndex = function() {
      return this.zIndex;
    };

    MobileInfoWindow.prototype.setContent = function(content) {
      this.content = content;
      if (this.element == null) {
        this.element = document.createElement('div');
        if (this.maxWidth) {
          this.element.style['max-width'] = this.maxWidth + 'px';
        }
        this.element.className = 'info-window';
      }
      if (typeof this.content === 'string') {
        this.element.innerHTML = this.content;
      } else {
        this.element.innerHTML = '';
        this.element.appendChild(this.content);
      }
      return google.maps.event.trigger(this, 'content_changed');
    };

    MobileInfoWindow.prototype.setPosition = function(position) {
      this.position = position;
      return google.maps.event.trigger(this, 'position_changed');
    };

    MobileInfoWindow.prototype.setZIndex = function(zIndex) {
      this.zIndex = zIndex;
      this.element.style['z-index'] = this.zIndex.toString();
      return google.maps.event.trigger(this, 'zindex_changed');
    };

    MobileInfoWindow.prototype.close = function() {
      return this.setMap(null);
    };

    MobileInfoWindow.prototype.open = function(map, anchor) {
      var icon, markerAnchor, markerSize, _ref;
      this.anchor = anchor;
      if (anchor != null) {
        this.setPosition(this.anchor.getPosition());
        icon = this.anchor.getIcon();
        if (icon != null) {
          markerSize = icon.size;
          markerAnchor = (_ref = icon.anchor) != null ? _ref : new google.maps.Point(Math.floor(markerSize.width / 2), markerSize.height);
        } else {
          markerSize = new google.maps.Size(DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
          markerAnchor = new google.maps.Point(DEFAULT_ICON_SIZE / 2, DEFAULT_ICON_SIZE);
        }
        this.pixelOffset = new google.maps.Size(Math.floor(markerSize.width / 2) - markerAnchor.x, -markerAnchor.y, 'px', 'px');
      }
      return this.setMap(map);
    };

    MobileInfoWindow.prototype.setOptions = function(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.maxWidth = (_ref = options.maxWidth) != null ? _ref : null;
      this.setContent((_ref1 = options.content) != null ? _ref1 : '');
      this.disableAutoPan = (_ref2 = options.disableAutoPan) != null ? _ref2 : null;
      this.pixelOffset = (_ref3 = options.pixelOffset) != null ? _ref3 : new google.maps.Size(0, 0, 'px', 'px');
      this.setPosition((_ref4 = options.position) != null ? _ref4 : null);
      return this.setZIndex((_ref5 = options.zIndex) != null ? _ref5 : 0);
    };

    MobileInfoWindow.prototype.onAdd = function() {
      this.getPanes().floatPane.appendChild(this.element);
      return google.maps.event.trigger(this, 'domready');
    };

    MobileInfoWindow.prototype.draw = function() {
      var xy;
      xy = this.getProjection().fromLatLngToDivPixel(this.getPosition());
      this.element.style.left = xy.x + this.pixelOffset.width - this.element.offsetWidth / 2 + 'px';
      return this.element.style.top = xy.y + this.pixelOffset.height - this.element.offsetHeight + 'px';
    };

    MobileInfoWindow.prototype.onRemove = function() {
      return this.element.parentNode.removeChild(this.element);
    };

    return MobileInfoWindow;

  })(google.maps.OverlayView);

  MarkerWithCircle = (function() {

    function MarkerWithCircle(options) {
      var _ref, _ref1, _ref2,
        _this = this;
      this.marker = new google.maps.Marker(options);
      this.pulse = new google.maps.Circle({
        center: options.position,
        clickable: false,
        map: (_ref = options.map) != null ? _ref : null,
        visible: (_ref1 = options.visible) != null ? _ref1 : true,
        zIndex: (_ref2 = options.zIndex) != null ? _ref2 : null,
        fillColor: '#06f',
        fillOpacity: 0.1,
        strokeColor: '#06f',
        strokeOpacity: 0.5,
        strokeWeight: 2
      });
      if (!((options.clickable != null) && !options.clickable)) {
        google.maps.event.addListener(this.marker, 'click', function() {
          return google.maps.event.trigger(_this, 'click');
        });
      }
    }

    MarkerWithCircle.prototype.setPosition = function(latLng) {
      this.marker.setPosition(latLng);
      return this.pulse.setCenter(latLng);
    };

    MarkerWithCircle.prototype.setVisible = function(visible) {
      this.marker.setVisible(visible);
      return this.pulse.setVisible(visible);
    };

    MarkerWithCircle.prototype.setMap = function(map) {
      this.marker.setMap(map);
      return this.pulse.setMap(map);
    };

    MarkerWithCircle.prototype.setRadius = function(radius) {
      return this.pulse.setRadius(radius);
    };

    return MarkerWithCircle;

  })();

  _ref = google.maps.Marker.prototype;
  for (name in _ref) {
    method = _ref[name];
    if (typeof method === 'function') {
      if (!MarkerWithCircle.prototype[name]) {
        MarkerWithCircle.prototype[name] = (function(name) {
          return function() {
            return this.marker[name]();
          };
        })(name);
      }
    }
  }

}).call(this);
