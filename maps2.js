// Generated by CoffeeScript 1.6.1
(function() {
  var CLIENT_ID, MAP_STATUS, SCOPES, checkAuth, foo, fusionTablesLayers, getLocalizedString, handleAuthResult, handleClientLoad, initializeDOM, initializeGoogleMaps, localize, map, saveMapStatus, searchFiles, setLocalExpressionInto;

  CLIENT_ID = '458982307818.apps.googleusercontent.com';

  SCOPES = ['https://www.googleapis.com/auth/drive.readonly.metadata', 'https://www.googleapis.com/auth/fusiontables.readonly'];

  handleClientLoad = function() {
    return window.setTimeout(checkAuth(true), 1);
  };

  checkAuth = function(immediate) {
    return function() {
      return gapi.auth.authorize({
        'client_id': CLIENT_ID,
        'scope': SCOPES,
        'immediate': immediate
      }, handleAuthResult);
    };
  };

  handleAuthResult = function(authResult) {
    if (authResult && !authResult.error) {
      console.log('ok');
      gapi.client.load('drive', 'v2', function() {
        $('#button-google-drive').css('display', 'none');
        return $('#button-fusion-tables').css('display', '');
      });
      return gapi.client.load('fusiontables', 'v1');
    } else {
      console.log('ng');
      return $('#button-google-drive').text('Google Drive').attr('disabled', null);
    }
  };

  searchFiles = function(query, callback) {
    var initialRequest, retrievePageOfFiles;
    retrievePageOfFiles = function(request, result) {
      return request.execute(function(resp) {
        var nextPageToken;
        result = result.concat(resp.items);
        nextPageToken = resp.nextPageToken;
        if (nextPageToken) {
          request = gapi.client.drive.files.list({
            'pageToken': nextPageToken
          });
          return retrievePageOfFiles(request, result);
        } else {
          return callback(result);
        }
      });
    };
    initialRequest = gapi.client.drive.files.list({
      q: query
    });
    return retrievePageOfFiles(initialRequest, []);
  };

  foo = function(callback) {
    var base64Data, boundary, close_delim, contentType, delimiter, metadata, multipartRequestBody, request;
    boundary = '-------314159265358979323846';
    delimiter = "\r\n--" + boundary + "\r\n";
    close_delim = "\r\n--" + boundary + "--";
    contentType = fileData.type || 'application/octet-stream';
    metadata = {
      'title': fileData.name,
      'mimeType': contentType
    };
    base64Data = btoa(reader.result);
    multipartRequestBody = delimiter + 'Content-Type: application/json\r\n\r\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: ' + contentType + '\r\n' + 'Content-Transfer-Encoding: base64\r\n' + '\r\n' + base64Data + close_delim;
    request = gapi.client.request({
      'path': '/upload/drive/v2/files',
      'method': 'POST',
      'params': {
        'uploadType': 'multipart'
      },
      'headers': {
        'Content-Type': 'multipart/mixed; boundary="' + boundary + '"'
      },
      'body': multipartRequestBody
    });
    if (!callback) {
      callback = function(file) {
        return console.log(file);
      };
    }
    return request.execute(callback);
  };

  window.handleClientLoad = handleClientLoad;

  MAP_STATUS = 'maps2-map-status';

  map = null;

  fusionTablesLayers = [];

  getLocalizedString = function(key) {
    var _ref;
    if (typeof localizedStrings !== "undefined" && localizedStrings !== null) {
      return (_ref = localizedStrings[key]) != null ? _ref : key;
    } else {
      return key;
    }
  };

  setLocalExpressionInto = function(id, english) {
    var el;
    el = document.getElementById(id);
    if (el != null) {
      return el.lastChild.data = getLocalizedString(english);
    }
  };

  localize = function() {
    var idWordPairs, key, value, _results;
    idWordPairs = [];
    document.title = getLocalizedString('Maps');
    _results = [];
    for (key in idWordPairs) {
      value = idWordPairs[key];
      _results.push(setLocalExpressionInto(key, value));
    }
    return _results;
  };

  saveMapStatus = function() {
    var pos;
    pos = map.getCenter();
    return localStorage[MAP_STATUS] = JSON.stringify({
      lat: pos.lat(),
      lng: pos.lng(),
      zoom: map.getZoom()
    });
  };

  initializeDOM = function() {
    var $fusionTables;
    localize();
    $('#container').css('display', '');
    $('#button-google-drive').on('click', checkAuth(false));
    $fusionTables = $('#fusion-tables');
    $('#modal-fusion-tables').on('show', function(event) {
      return searchFiles('mimeType = "application/vnd.google-apps.fusiontable" and trashed = false', function(result) {
        var checked, e;
        checked = function(column) {
          if ($fusionTables.find("input[value=" + column.id + "]:checked").length > 0) {
            return 'checked';
          } else {
            return '';
          }
        };
        return $fusionTables.html(((function() {
          var _i, _len, _ref, _results;
          _ref = result.filter(function(e) {
            return e.shared;
          });
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push("<label><input type=\"checkbox\" value=\"" + e.id + "\" " + (checked(e)) + "/>" + e.title + "</label>");
          }
          return _results;
        })()).join(''));
      });
    });
    return $('#button-show').on('click', function(event) {
      var e, req, _i, _j, _len, _len1, _ref, _results;
      for (_i = 0, _len = fusionTablesLayers.length; _i < _len; _i++) {
        e = fusionTablesLayers[_i];
        e.setMap(null);
      }
      fusionTablesLayers = [];
      _ref = $('#fusion-tables input:checked:lt(5)');
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        e = _ref[_j];
        req = gapi.client.fusiontables.column.list({
          tableId: e.value
        });
        _results.push(req.execute((function(tableId) {
          return function(result) {
            var locations, option;
            if (result.error != null) {
              return console.error(result.error);
            } else {
              locations = result.items.filter(function(e) {
                return e.type === 'LOCATION';
              });
              if (locations.length > 0) {
                option = {
                  map: map,
                  query: {
                    from: tableId,
                    select: locations[0].name
                  },
                  styles: [
                    {
                      markerOptions: {
                        iconName: (fusionTablesLayers.length + 1) + '_blue'
                      }
                    }
                  ]
                };
                return fusionTablesLayers.push(new google.maps.FusionTablesLayer(option));
              } else {
                return console.error('no locations');
              }
            }
          };
        })(e.value)));
      }
      return _results;
    });
  };

  initializeGoogleMaps = function() {
    var mapOptions, mapStatus;
    mapOptions = {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      streetView: new google.maps.StreetViewPanorama(document.getElementById('streetview'), {
        panControl: false,
        zoomControl: false,
        visible: false
      })
    };
    google.maps.event.addListener(mapOptions.streetView, 'position_changed', function() {
      return map.setCenter(this.getPosition());
    });
    if (localStorage[MAP_STATUS] != null) {
      mapStatus = JSON.parse(localStorage[MAP_STATUS]);
      mapOptions.center = new google.maps.LatLng(mapStatus.lat, mapStatus.lng);
      mapOptions.zoom = mapStatus.zoom;
    } else {
      mapOptions.center = new google.maps.LatLng(35.660389, 139.729225);
      mapOptions.zoom = 14;
    }
    map = new google.maps.Map(document.getElementById('map'), mapOptions);
    return map.setTilt(45);
  };

  window.app = {
    initialize: function(callback) {
      initializeGoogleMaps();
      initializeDOM();
      return callback();
    },
    saveMapStatus: saveMapStatus
  };

}).call(this);
