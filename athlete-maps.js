// Generated by CoffeeScript 1.6.1
(function() {
  var $infoContent, autocomplete, createMarker, currentMarker, directionsRenderer, drawElevation, elevationAlongSteps, elevationService, graph, history, infoWindow, map, setContent, spinner, startMarker;

  Array.prototype.find = function(predicate) {
    var _ref;
    return (_ref = this.filter(predicate)[0]) != null ? _ref : null;
  };

  currentMarker = null;

  startMarker = null;

  directionsRenderer = null;

  map = null;

  infoWindow = null;

  $infoContent = null;

  history = null;

  graph = Raphael('graph', innerWidth, $('#graph').innerHeight());

  spinner = new Spinner();

  elevationService = new google.maps.ElevationService();

  elevationAlongSteps = function(steps, callback) {
    var MAGIC, aux, path, s, totalResult, _i, _len;
    MAGIC = 300;
    path = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      path = path.concat(s.path);
    }
    totalResult = [];
    aux = function(index) {
      return elevationService.getElevationForLocations({
        locations: path.slice(index, index + MAGIC)
      }, function(result, status) {
        if (status === google.maps.ElevationStatus.OK) {
          totalResult = totalResult.concat(result);
          index += MAGIC;
          if (index < path.length) {
            return aux(index);
          } else {
            return callback(totalResult);
          }
        } else {
          return console.log(status);
        }
      });
    };
    return aux(0);
  };

  drawElevation = function(elevationResults) {
    var aux, d, distances, elevations, i, maxSlope, slope, slopes, steep, threshold, _i, _ref;
    elevations = elevationResults.map(function(x) {
      return x.elevation;
    });
    slopes = [0];
    distances = [0];
    steep = 0;
    maxSlope = 0;
    threshold = parseFloat($('#elevation input[name="threshold"]').val());
    for (i = _i = 0, _ref = elevationResults.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      d = google.maps.geometry.spherical.computeDistanceBetween(elevationResults[i].location, elevationResults[i + 1].location);
      slope = d !== 0 ? (elevations[i + 1] - elevations[i]) / d * 100 : slopes[slopes.length - 1];
      maxSlope = Math.max(maxSlope, slope);
      slopes.push(slope);
      if (slope > threshold) {
        steep += d;
      }
      distances.push(distances[i] + d);
    }
    $('#data').text("max slope: " + maxSlope + "°  steep distance: " + (Math.floor(steep)) + "km(" + (Math.floor(steep / distances[distances.length - 1] * 100)) + "%)");
    aux = function() {
      graph.clear();
      graph.linechart(20, 0, innerWidth - 40, $('#graph').innerHeight() / 2 - 10, distances, elevations, {
        axis: '0 1 0 1'
      });
      return graph.linechart(20, $('#graph').innerHeight() / 2 - 10, innerWidth - 40, $('#graph').innerHeight() / 2 - 10, [distances, [distances[0], distances[distances.length - 1]]], [slopes, [0, 0]], {
        axis: '0 1 1 1'
      });
    };
    if ($('#container').hasClass('graph')) {
      return aux();
    } else {
      $('#container').addClass('graph');
      return $('#graph').on($.support.transition.end, function() {
        google.maps.event.trigger(map, 'resize');
        return aux();
      });
    }
  };

  $infoContent = $('<div>\n    <p id="description"></p>\n    <button id="start" type="button" class="btn">スタート</button>\n    <button id="goal" type="button" class="btn">ゴール</button>\n</div>');

  $infoContent.children('#start').on('click', function() {
    startMarker = currentMarker;
    return setTimeout((function() {
      return infoWindow.close();
    }), 0);
  });

  $infoContent.children('#goal').on('click', function() {
    setTimeout((function() {
      return infoWindow.close();
    }), 0);
    return new google.maps.DirectionsService().route({
      avoidHighways: true,
      avoidTolls: true,
      destination: currentMarker.getPosition(),
      origin: startMarker.getPosition(),
      provideRouteAlternatives: true,
      travelMode: google.maps.TravelMode.DRIVING
    }, function(result, status) {
      var render;
      history = [];
      if (status === google.maps.DirectionsStatus.OK) {
        startMarker.setMap(null);
        currentMarker.setMap(null);
        render = function() {
          if (directionsRenderer != null) {
            return directionsRenderer.setDirections(result);
          } else {
            history.push({
              directionsResult: result
            });
            directionsRenderer = new google.maps.DirectionsRenderer({
              directions: result,
              draggable: true,
              map: map,
              panel: $('#directions-panel')[0]
            });
            return google.maps.event.addListener(directionsRenderer, 'directions_changed', function() {
              return history.push({
                directionsResult: this.getDirections()
              });
            });
          }
        };
        if ($('#map-container').hasClass('route')) {
          return render();
        } else {
          $('#map-container').addClass('route');
          return $('#panel').one($.support.transition.end, function() {
            google.maps.event.trigger(map, 'resize');
            return render();
          });
        }
      } else {
        return alert(status);
      }
    });
  });

  infoWindow = new google.maps.InfoWindow({
    content: $infoContent[0]
  });

  setContent = function(description) {
    return $infoContent.children('#description').text(description);
  };

  createMarker = function(position) {
    var marker;
    marker = new google.maps.Marker({
      animation: google.maps.Animation.DROP,
      draggable: true,
      map: map,
      position: position
    });
    return google.maps.event.addListener(marker, 'click', function() {
      currentMarker = this;
      setContent(this.getPosition().toString());
      return infoWindow.open(map, this);
    });
  };

  map = new google.maps.Map(document.getElementById('map'), {
    center: new google.maps.LatLng(34.584199, 135.835163),
    zoom: 10,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    panControl: false
  });

  google.maps.event.addListener(map, 'click', function(event) {
    return createMarker(event.latLng);
  });

  autocomplete = new google.maps.places.Autocomplete($('#search')[0]);

  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    var place;
    place = autocomplete.getPlace();
    if (place.geometry != null) {
      map.panTo(place.geometry.location);
      return new google.maps.Marker({
        animation: google.maps.Animation.DROP,
        draggable: true,
        map: map,
        position: place.geometry.location
      });
    }
  });

  $('#elevation').on('submit', function(event) {
    var directions, directionsInHistory, e, index, steps, _i, _len, _ref, _ref1, _ref2;
    directions = directionsRenderer.getDirections();
    index = (_ref = directionsRenderer.getRouteIndex()) != null ? _ref : 0;
    directionsInHistory = history.find(function(e) {
      return e.directionsResult === directions;
    });
    if (((_ref1 = directionsInHistory.elevationResults) != null ? _ref1[index] : void 0) != null) {
      drawElevation(directionsInHistory.elevationResults[index]);
    } else {
      steps = [];
      _ref2 = directions.routes[index].legs;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        steps = steps.concat(e.steps);
      }
      spinner.spin(document.body);
      elevationAlongSteps(steps, function(result) {
        var _ref3;
        spinner.stop();
        if ((_ref3 = directionsInHistory.elevationResults) == null) {
          directionsInHistory.elevationResults = [];
        }
        directionsInHistory.elevationResults[index] = result;
        return drawElevation(result);
      });
    }
    return event.preventDefault();
  });

}).call(this);
