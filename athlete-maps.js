// Generated by CoffeeScript 1.6.3
(function() {
  var $infoContent, KML_SERVER, autocomplete, createKML, createMarker, currentMarker, directionsRenderer, drawElevation, elevationAlongSteps, elevationService, graph, history, infoWindow, lAlpedHuez, map, route, setContent, spinner, startMarker;

  KML_SERVER = 'maps2013.herokuapp.com';

  Array.prototype.find = function(predicate) {
    var _ref;
    return (_ref = this.filter(predicate)[0]) != null ? _ref : null;
  };

  lAlpedHuez = {
    start: new google.maps.LatLng(45.059304965363985, 6.037845611572266),
    goal: new google.maps.LatLng(45.09551908397622, 6.070418357849121)
  };

  currentMarker = null;

  startMarker = null;

  directionsRenderer = null;

  map = null;

  infoWindow = null;

  $infoContent = null;

  history = null;

  graph = Raphael('graph', innerWidth, $('#graph').innerHeight());

  spinner = new Spinner();

  createKML = function(directionsRoute) {
    var e, p, step, steps;
    steps = [].concat.apply([], (function() {
      var _i, _len, _ref, _results;
      _ref = directionsRoute.legs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(e.steps);
      }
      return _results;
    })());
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n  <Document>\n    <name>Route search result</name>\n    <description></description>\n    <Style id=\"yellowLineGreenPoly\">\n      <LineStyle>\n        <color>7f00ffff</color>\n        <width>4</width>\n      </LineStyle>\n      <PolyStyle>\n        <color>7f00ff00</color>\n      </PolyStyle>\n    </Style>\n    <Placemark>\n      <name>" + directionsRoute.legs[0].start_address + " - " + directionsRoute.legs[directionsRoute.legs.length - 1].end_address + "</name>\n      <description></description>\n      <styleUrl>#yellowLineGreenPoly</styleUrl>\n      <LineString>\n        <extrude>1</extrude>\n        <tessellate>1</tessellate>\n        <altitudeMode>clampToGround</altitudeMode>\n        <coordinates>\n          " + (((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        step = steps[_i];
        _results.push(((function() {
          var _j, _len1, _ref, _results1;
          _ref = step.path;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            p = _ref[_j];
            _results1.push("" + (p.lng()) + "," + (p.lat()) + ",0\n");
          }
          return _results1;
        })()).join(''));
      }
      return _results;
    })()).join('')) + "\n        </coordinates>\n      </LineString>\n    </Placemark>\n  </Document>\n</kml>";
  };

  route = function(origin, destination, callback) {
    if (callback == null) {
      callback = function() {};
    }
    return route.service.route({
      avoidHighways: true,
      avoidTolls: true,
      destination: destination,
      origin: origin,
      provideRouteAlternatives: true,
      travelMode: google.maps.TravelMode.DRIVING
    }, function(result, status) {
      var render;
      history = [];
      if (status === google.maps.DirectionsStatus.OK) {
        render = function() {
          if (directionsRenderer != null) {
            directionsRenderer.setDirections(result);
          } else {
            history.push({
              directionsResult: result
            });
            directionsRenderer = new google.maps.DirectionsRenderer({
              directions: result,
              draggable: true,
              map: map,
              panel: $('#directions-panel')[0]
            });
            google.maps.event.addListener(directionsRenderer, 'directions_changed', function() {
              return history.push({
                directionsResult: this.getDirections()
              });
            });
          }
          return callback();
        };
        if ($('#map-container').hasClass('route')) {
          render();
        } else {
          $('#map-container').addClass('route');
          $('#panel').one($s.vendor.transitionend, function() {
            return render();
          });
        }
        return $('#kml').attr('href', "" + (/Mobile.*Safari/.test(navigator.userAgent) ? 'comgoogleearth' : 'http') + "://" + KML_SERVER + "/earth/kml/" + (new Date().getTime()) + ".kml");
      } else {
        return alert(status);
      }
    });
  };

  route.service = new google.maps.DirectionsService();

  elevationService = new google.maps.ElevationService();

  elevationAlongSteps = function(steps, callback) {
    var MAGIC, aux, path, s, totalResult, _i, _len;
    MAGIC = 300;
    path = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      path = path.concat(s.path);
    }
    totalResult = [];
    aux = function(index) {
      return elevationService.getElevationForLocations({
        locations: path.slice(index, index + MAGIC)
      }, function(result, status) {
        switch (status) {
          case google.maps.ElevationStatus.OK:
            totalResult = totalResult.concat(result);
            index += MAGIC;
            if (index < path.length) {
              $('#progress-bar').css('width', index / (path.length - 1) * 100 + '%');
              return setTimeout((function() {
                return aux(index);
              }), 1500);
            } else {
              $('#progress-bar').css('width', '0%');
              return callback(totalResult);
            }
            break;
          case google.maps.ElevationStatus.OVER_QUERY_LIMIT:
            console.log(status);
            return setTimeout((function() {
              return aux(index);
            }), 3000);
          default:
            return console.log(status);
        }
      });
    };
    return aux(0);
  };

  drawElevation = function(elevationResults) {
    var aux, d, distances, elevations, i, maxSlope, maxSlopeIndex, minSlope, minSlopeIndex, slope, slopes, steepBack, steepGo, threshold, _i, _ref;
    elevations = elevationResults.map(function(x) {
      return x.elevation;
    });
    slopes = [0];
    distances = [0];
    steepGo = 0;
    steepBack = 0;
    maxSlope = 0;
    maxSlopeIndex = 0;
    minSlope = 0;
    minSlopeIndex = 0;
    threshold = parseFloat($('#elevation input[name="threshold"]').val());
    for (i = _i = 1, _ref = elevationResults.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      d = google.maps.geometry.spherical.computeDistanceBetween(elevationResults[i - 1].location, elevationResults[i].location) / 1000;
      slope = d !== 0 ? (elevations[i] - elevations[i - 1]) / (d * 1000) * 100 : slopes[slopes.length - 1];
      slopes.push(slope);
      if (slope > maxSlope) {
        maxSlope = slope;
        maxSlopeIndex = i;
      }
      if (slope < minSlope) {
        minSlope = slope;
        minSlopeIndex = i;
      }
      if (slope > threshold) {
        steepGo += d;
      }
      if (slope < -threshold) {
        steepBack += d;
      }
      distances.push(distances[i - 1] + d);
    }
    aux = function() {
      var graphXOffset, roadMessage, slopeGraph;
      graphXOffset = 60;
      graph.clear();
      graph.text(30, 20, 'elevation');
      graph.linechart(graphXOffset, 0, innerWidth - graphXOffset - 30, ($('#graph').innerHeight() - 20) / 2 - 10, distances, elevations, {
        axis: '0 1 0 1'
      });
      graph.text(30, ($('#graph').innerHeight() - 20) / 2 + 10, 'slope');
      slopeGraph = graph.linechart(graphXOffset, ($('#graph').innerHeight() - 20) / 2 - 10, innerWidth - graphXOffset - 30, $('#graph').innerHeight() / 2 - 10, [distances, [distances[0], distances[distances.length - 1]], [distances[maxSlopeIndex], distances[maxSlopeIndex]], [distances[minSlopeIndex], distances[minSlopeIndex]]], [slopes, [0, 0], [minSlope, maxSlope], [minSlope, maxSlope]], {
        axis: '0 1 1 1'
      });
      slopeGraph.clickColumn(function(event) {
        var distance, e, _j, _len;
        distance = (event.clientX - graphXOffset) / (innerWidth - 40) * distances[distances.length - 1];
        for (i = _j = 0, _len = distances.length; _j < _len; i = ++_j) {
          e = distances[i];
          if (e > distance) {
            break;
          }
        }
        map.panTo(elevationResults[i].location);
        return map.setZoom(15);
      });
      roadMessage = function(max, steep) {
        return "max slope: " + (Math.floor(max)) + "°  steep distance: " + (Math.floor(steep * 10) / 10) + "km(" + (Math.floor(steep / distances[distances.length - 1] * 100)) + "%)";
      };
      return $('#data').text('way - ' + roadMessage(maxSlope, steepGo) + ' / way back - ' + roadMessage(-minSlope, steepBack));
    };
    if ($('#container').hasClass('graph')) {
      return aux();
    } else {
      $('#container').addClass('graph');
      return $('#graph').on($s.vendor.transitionend, aux);
    }
  };

  setContent = function(description) {
    return $infoContent.children('#description').text(description);
  };

  createMarker = function(position) {
    var marker;
    marker = new google.maps.Marker({
      animation: google.maps.Animation.DROP,
      draggable: true,
      map: map,
      position: position
    });
    google.maps.event.addListener(marker, 'animation_changed', function() {
      return google.maps.event.trigger(marker, 'click');
    });
    return google.maps.event.addListener(marker, 'click', function() {
      currentMarker = this;
      setContent(this.getPosition().toString());
      return infoWindow.open(map, this);
    });
  };

  $infoContent = $('<div>\n    <p id="description"></p>\n    <button id="start" type="button" class="btn">スタート</button>\n    <button id="goal" type="button" class="btn">ゴール</button>\n</div>');

  $infoContent.children('#start').on('click', function() {
    startMarker = currentMarker;
    return setTimeout((function() {
      return infoWindow.close();
    }), 0);
  });

  $infoContent.children('#goal').on('click', function() {
    setTimeout((function() {
      return infoWindow.close();
    }), 0);
    if (startMarker == null) {
      return;
    }
    return route(startMarker.getPosition(), currentMarker.getPosition(), function() {
      startMarker.setMap(null);
      return currentMarker.setMap(null);
    });
  });

  infoWindow = new google.maps.InfoWindow({
    content: $infoContent[0]
  });

  map = new google.maps.Map(document.getElementById('map'), {
    center: lAlpedHuez.goal,
    zoom: 10,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    panControl: false
  });

  google.maps.event.addListener(map, 'click', function(event) {
    return createMarker(event.latLng);
  });

  autocomplete = new google.maps.places.Autocomplete($('#search')[0]);

  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    var place;
    place = autocomplete.getPlace();
    if (place.geometry != null) {
      map.panTo(place.geometry.location);
      return createMarker(place.geometry.location);
    }
  });

  $('#elevation').on('submit', function(event) {
    var directions, directionsInHistory, e, index, steps, _i, _len, _ref, _ref1, _ref2;
    directions = directionsRenderer.getDirections();
    index = (_ref = directionsRenderer.getRouteIndex()) != null ? _ref : 0;
    directionsInHistory = history.find(function(e) {
      return e.directionsResult === directions;
    });
    if (((_ref1 = directionsInHistory.elevationResults) != null ? _ref1[index] : void 0) != null) {
      drawElevation(directionsInHistory.elevationResults[index]);
    } else {
      steps = [];
      _ref2 = directions.routes[index].legs;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        steps = steps.concat(e.steps);
      }
      spinner.spin(document.body);
      elevationAlongSteps(steps, function(result) {
        spinner.stop();
        if (directionsInHistory.elevationResults == null) {
          directionsInHistory.elevationResults = [];
        }
        directionsInHistory.elevationResults[index] = result;
        return drawElevation(result);
      });
    }
    return event.preventDefault();
  });

  $('#map-container, #map').on($s.vendor.transitionend, function() {
    return google.maps.event.trigger(map, 'resize');
  });

  $('#panel-close').on('click', function() {
    $('#container').removeClass('graph');
    $('#map-container').removeClass('route');
    return directionsRenderer.setMap(null);
  });

  $('#kml').on('click', function() {
    var $this, xhr, _ref;
    $this = $(this);
    xhr = $.ajax($this.attr('href').replace(/comgoogleearth/, 'http'), {
      async: false,
      type: 'POST',
      contentType: 'text/plain; charset=UTF-8',
      data: createKML(directionsRenderer.getDirections().routes[(_ref = directionsRenderer.getRouteIndex()) != null ? _ref : 0])
    });
    if (xhr.status === 200) {
      return true;
    } else {
      setTimeout((function() {
        return alert('Failed to connect the server. Touch again, please');
      }), 0);
      return false;
    }
  });

  route(lAlpedHuez.start, lAlpedHuez.goal, function() {
    return $('#elevation').trigger('submit');
  });

}).call(this);

/*
//@ sourceMappingURL=athlete-maps.map
*/
