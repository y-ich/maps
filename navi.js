// Generated by CoffeeScript 1.6.3
(function() {
  var $map, WAudio, autocomplete, destination, directionsRenderer, home, map, navigationMode, normalMap, rotationMap, route, say, startWatch, unlockSpeech, watchId;

  WAudio = (function() {
    WAudio.NO_SOURCE = 0;

    WAudio.LOADING = 1;

    WAudio.LOADED = 2;

    WAudio.context = typeof AudioContext !== "undefined" && AudioContext !== null ? new AudioContext() : typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null ? new webkitAudioContext() : null;

    WAudio.unlock = function() {
      var source;
      source = this.context.createBufferSource();
      source.buffer = this.context.createBuffer(1, 1, 22050);
      source.connect(this.context.destination);
      return source.noteOn(0);
    };

    function WAudio(src) {
      this.src = src;
      this.forcePlay = false;
      this.state = WAudio.NO_SOURCE;
    }

    WAudio.prototype.load = function() {
      var xhr,
        _this = this;
      xhr = new XMLHttpRequest();
      xhr.open('GET', this.src);
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return WAudio.context.decodeAudioData(xhr.response, function(buffer) {
          _this.buffer = buffer;
          _this.state = WAudio.LOADED;
          if (_this.forcePlay) {
            return _this.play();
          }
        });
      };
      xhr.send();
      return this.state = WAudio.LOADING;
    };

    WAudio.prototype.play = function() {
      switch (this.state) {
        case WAudio.NO_SOURCE:
          this.forcePlay = true;
          return this.load();
        case WAudio.LOADING:
          return this.forcePlay = true;
        case WAudio.LOADED:
          this.source = WAudio.context.createBufferSource();
          this.source.buffer = this.buffer;
          this.source.connect(WAudio.context.destination);
          return this.source.noteOn(0);
      }
    };

    WAudio.prototype.pause = function() {
      return this.source.noteOff(0);
    };

    return WAudio;

  })();

  map = null;

  home = new google.maps.LatLng(34.584305, 135.83521);

  destination = new google.maps.LatLng(34.529284, 135.797228);

  $map = $('#map');

  directionsRenderer = null;

  watchId = null;

  navigationMode = false;

  say = typeof speechSynthesis !== "undefined" && speechSynthesis !== null ? function(string) {
    var phrase;
    phrase = new SpeechSynthesisUtterance(string);
    phrase.lang = lang;
    phrase.volume = 1;
    phrase.rate = 0.5;
    phrase.pitch = 1.2;
    return speechSynthesis.speak(phrase);
  } : function(string) {
    var MAX_LENGTH, audio;
    MAX_LENGTH = 100;
    audio = new WAudio("http://safari-park.herokuapp.com/translate_tts?tl=" + lang + "&q=" + (encodeURIComponent(string.slice(0, MAX_LENGTH))));
    return audio.play();
  };

  unlockSpeech = typeof speechSynthesis !== "undefined" && speechSynthesis !== null ? function() {
    return say('');
  } : function() {
    return WAudio.unlock();
  };

  window.say = say;

  route = function(origin, destination, callback) {
    if (callback == null) {
      callback = function() {};
    }
    return route.service.route({
      avoidHighways: true,
      avoidTolls: true,
      destination: destination,
      origin: origin,
      provideRouteAlternatives: true,
      travelMode: google.maps.TravelMode.DRIVING
    }, function(result, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsRenderer = new google.maps.DirectionsRenderer({
          directions: result,
          map: map,
          panel: $('#panel')[0],
          routeIndex: 0
        });
        return callback(result);
      } else {
        return alert(status);
      }
    });
  };

  route.service = new google.maps.DirectionsService();

  rotationMap = function() {
    var r;
    $('#tilt').addClass('tilt');
    r = Math.ceil(Math.sqrt(innerWidth * innerWidth + innerHeight * innerHeight));
    $map.css('width', r + 'px');
    $map.css('height', r + 'px');
    $map.css('left', -(r - innerWidth) / 2 + 'px');
    $map.css('top', -(r - innerHeight) / 2 + 'px');
    map.setOptions({
      draggable: false
    });
    return google.maps.event.trigger(map, 'resize');
  };

  normalMap = function() {
    $('#tilt').removeClass('tilt');
    $map.css('width', '');
    $map.css('height', '');
    $map.css('left', '');
    $map.css('top', '');
    $map.css('-webkitTransform', '');
    $map.css('display', '');
    map.setOptions({
      draggable: true
    });
    return google.maps.event.trigger(map, 'resize');
  };

  startWatch = function() {
    var lastTime;
    rotationMap();
    map.setZoom(18);
    lastTime = new Date().getTime();
    return watchId = navigator.geolocation.watchPosition((function(position) {
      var latLng, leg, now, step, _i, _j, _len, _len1, _ref, _ref1;
      now = new Date().getTime();
      latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
      map.setCenter(latLng);
      if ((position.coords.heading != null) && (position.coords.speed != null)) {
        latLng = google.maps.geometry.spherical.computeOffset(latLng, position.coords.speed * (now - lastTime) / 1000, position.coords.heading);
      }
      new google.maps.StreetViewService().getPanoramaByLocation(latLng, 49, function(data, status) {
        var sv;
        if (status === google.maps.StreetViewStatus.OK) {
          sv = map.getStreetView();
          sv.setPosition(data.location.latLng);
          return $map.css('display', 'none');
        } else {
          return $map.css('display', '');
        }
      });
      _ref = directionsRenderer.getDirections().routes[directionsRenderer.getRouteIndex()].legs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        leg = _ref[_i];
        _ref1 = leg.steps;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          step = _ref1[_j];
          if (google.maps.geometry.spherical.computeDistanceBetween(latLng, step.start_location) < 50) {
            if (step.passed == null) {
              say($("<div>" + step.instructions + "</div>").text().replace(/\s/g, '').replace(/（.*?）/g, ''));
              step.passed = true;
            }
          }
        }
      }
      return lastTime = now;
    }), (function() {}), {
      enableHighAccuracy: true,
      timeout: 60000
    });
  };

  window.ondeviceorientation = function(event) {
    if (watchId != null) {
      map.getStreetView().setPov({
        heading: event.webkitCompassHeading,
        pitch: 0
      });
      return $map.css('-webkitTransform', "rotateZ(" + (-event.webkitCompassHeading) + "deg)");
    }
  };

  window.onpagehide = function() {
    if (watchId != null) {
      return navigator.geolocation.clearWatch(watchId);
    }
  };

  window.onpageshow = function() {
    if (watchId != null) {
      return startWatch();
    }
  };

  window.onorientationchange = function() {
    if (watchId != null) {
      return rotationMap();
    }
  };

  autocomplete = new google.maps.places.Autocomplete($('#search > form > input')[0]);

  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    var place;
    place = autocomplete.getPlace();
    if (place.geometry != null) {
      return route(home, place.geometry.location, function() {
        return $('#start-stop').removeAttr('disabled');
      });
    }
  });

  $('#search form').on('submit', function(event) {
    return event.preventDefault();
  });

  $('#start-stop').on('click', function(event) {
    if (watchId != null) {
      navigator.geolocation.clearWatch(watchId);
      watchId = null;
      $('#silent')[0].pause();
      normalMap();
      $('#panel').css('display', '');
      return $(this).text('Navi');
    } else {
      $('#panel').css('display', 'none');
      unlockSpeech();
      $('#silent')[0].play();
      startWatch();
      return $(this).text('Stop');
    }
  });

  navigator.geolocation.getCurrentPosition((function(position) {
    return map = new google.maps.Map($map[0], {
      center: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
      zoom: 14,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      streetView: new google.maps.StreetViewPanorama($('#street-view')[0], {
        visible: true
      })
    });
  }));

  $(document).on('touchmove', function(event) {
    return event.preventDefault();
  });

}).call(this);
