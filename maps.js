// Generated by CoffeeScript 1.3.3
(function() {
  var $addressField, $destinationField, $gps, $map, $message, $originField, $pinList, DEFAULT_ICON_SIZE, MSMARKER_SHADOW, MapFSM, MapState, MarkerWithCircle, MobileInfoWindow, PURPLE_DOT_IMAGE, Place, RED_DOT_IMAGE, autoAddressField, autoDestinationField, autoOriginField, bicycleLayer, bookmarkContext, bookmarks, currentPlace, directionsRenderer, droppedPlace, generateBookmarkList, generateHistoryList, geocoder, getLocalizedString, getMapType, getTravelMode, history, infoWindow, initializeDOM, initializeGoogleMaps, isHold, kmlLayer, localize, map, mapFSM, mapSum, maxHistory, meterToString, method, name, naviMarker, navigate, ordinal, panoramioLayer, pinRowHeight, placeContext, saveMapStatus, saveOtherStatus, scrollLeft, searchAddress, searchDirections, searchPlace, secondToString, setInfoPage, setLocalExpressionInto, setRouteMap, setSearchResult, sum, tracer, tracer2State, trafficLayer, transitLayer, updateField, updateMessage, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MobileInfoWindow = (function(_super) {

    __extends(MobileInfoWindow, _super);

    function MobileInfoWindow(options) {
      this.setOptions(options);
    }

    MobileInfoWindow.prototype.getContent = function() {
      return this.content;
    };

    MobileInfoWindow.prototype.getPosition = function() {
      return this.position;
    };

    MobileInfoWindow.prototype.getZIndex = function() {
      return this.zIndex;
    };

    MobileInfoWindow.prototype.setContent = function(content) {
      this.content = content;
      if (this.element == null) {
        this.element = document.createElement('div');
        if (this.maxWidth) {
          this.element.style['max-width'] = this.maxWidth + 'px';
        }
        this.element.className = 'info-window';
      }
      if (typeof this.content === 'string') {
        this.element.innerHTML = this.content;
      } else {
        this.element.innerHTML = '';
        this.element.appendChild(this.content);
      }
      return google.maps.event.trigger(this, 'content_changed');
    };

    MobileInfoWindow.prototype.setPosition = function(position) {
      this.position = position;
      return google.maps.event.trigger(this, 'position_changed');
    };

    MobileInfoWindow.prototype.setZIndex = function(zIndex) {
      this.zIndex = zIndex;
      this.element.style['z-index'] = this.zIndex.toString();
      return google.maps.event.trigger(this, 'zindex_changed');
    };

    MobileInfoWindow.prototype.close = function() {
      return this.setMap(null);
    };

    MobileInfoWindow.prototype.open = function(map, anchor) {
      var icon, markerAnchor, markerSize, _ref;
      this.anchor = anchor;
      if (anchor != null) {
        this.setPosition(this.anchor.getPosition());
        icon = this.anchor.getIcon();
        if (icon != null) {
          markerSize = icon.size;
          markerAnchor = (_ref = icon.anchor) != null ? _ref : new google.maps.Point(Math.floor(markerSize.width / 2), markerSize.height);
        } else {
          markerSize = new google.maps.Size(DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
          markerAnchor = new google.maps.Point(DEFAULT_ICON_SIZE / 2, DEFAULT_ICON_SIZE);
        }
        this.pixelOffset = new google.maps.Size(Math.floor(markerSize.width / 2) - markerAnchor.x, -markerAnchor.y, 'px', 'px');
      }
      return this.setMap(map);
    };

    MobileInfoWindow.prototype.setOptions = function(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.maxWidth = (_ref = options.maxWidth) != null ? _ref : null;
      this.setContent((_ref1 = options.content) != null ? _ref1 : '');
      this.disableAutoPan = (_ref2 = options.disableAutoPan) != null ? _ref2 : null;
      this.pixelOffset = (_ref3 = options.pixelOffset) != null ? _ref3 : new google.maps.Size(0, 0, 'px', 'px');
      this.setPosition((_ref4 = options.position) != null ? _ref4 : null);
      return this.setZIndex((_ref5 = options.zIndex) != null ? _ref5 : 0);
    };

    MobileInfoWindow.prototype.onAdd = function() {
      this.getPanes().floatPane.appendChild(this.element);
      return google.maps.event.trigger(this, 'domready');
    };

    MobileInfoWindow.prototype.draw = function() {
      var xy;
      xy = this.getProjection().fromLatLngToDivPixel(this.getPosition());
      this.element.style.left = xy.x + this.pixelOffset.width - this.element.offsetWidth / 2 + 'px';
      return this.element.style.top = xy.y + this.pixelOffset.height - this.element.offsetHeight + 'px';
    };

    MobileInfoWindow.prototype.onRemove = function() {
      return this.element.parentNode.removeChild(this.element);
    };

    return MobileInfoWindow;

  })(google.maps.OverlayView);

  MarkerWithCircle = (function() {

    function MarkerWithCircle(options) {
      var _ref, _ref1, _ref2,
        _this = this;
      this.marker = new google.maps.Marker(options);
      this.pulse = new google.maps.Circle({
        center: options.position,
        clickable: false,
        map: (_ref = options.map) != null ? _ref : null,
        visible: (_ref1 = options.visible) != null ? _ref1 : true,
        zIndex: (_ref2 = options.zIndex) != null ? _ref2 : null,
        fillColor: '#06f',
        fillOpacity: 0.1,
        strokeColor: '#06f',
        strokeOpacity: 0.5,
        strokeWeight: 2
      });
      if (!((options.clickable != null) && !options.clickable)) {
        google.maps.event.addListener(this.marker, 'click', function() {
          return google.maps.event.trigger(_this, 'click');
        });
      }
    }

    MarkerWithCircle.prototype.setPosition = function(latLng) {
      this.marker.setPosition(latLng);
      return this.pulse.setCenter(latLng);
    };

    MarkerWithCircle.prototype.setVisible = function(visible) {
      this.marker.setVisible(visible);
      return this.pulse.setVisible(visible);
    };

    MarkerWithCircle.prototype.setMap = function(map) {
      this.marker.setMap(map);
      return this.pulse.setMap(map);
    };

    MarkerWithCircle.prototype.setRadius = function(radius) {
      return this.pulse.setRadius(radius);
    };

    return MarkerWithCircle;

  })();

  _ref = google.maps.Marker.prototype;
  for (name in _ref) {
    method = _ref[name];
    if (typeof method === 'function') {
      if (!MarkerWithCircle.prototype[name]) {
        MarkerWithCircle.prototype[name] = (function(name) {
          return function() {
            return this.marker[name]();
          };
        })(name);
      }
    }
  }

  PURPLE_DOT_IMAGE = 'http://maps.google.co.jp/mapfiles/ms/icons/purple-dot.png';

  RED_DOT_IMAGE = 'http://maps.google.co.jp/mapfiles/ms/icons/red-dot.png';

  MSMARKER_SHADOW = 'http://maps.google.co.jp/mapfiles/ms/icons/msmarker.shadow.png';

  DEFAULT_ICON_SIZE = 32;

  map = null;

  geocoder = null;

  directionsRenderer = null;

  transitLayer = null;

  trafficLayer = null;

  bicycleLayer = null;

  panoramioLayer = null;

  kmlLayer = null;

  autoAddressField = null;

  autoOriginField = null;

  autoDestinationField = null;

  currentPlace = null;

  naviMarker = null;

  infoWindow = null;

  droppedPlace = null;

  searchPlace = null;

  placeContext = null;

  $map = null;

  $gps = null;

  $addressField = null;

  $originField = null;

  $destinationField = null;

  $pinList = null;

  $message = null;

  pinRowHeight = null;

  scrollLeft = false;

  mapFSM = null;

  bookmarkContext = null;

  bookmarks = [];

  history = [];

  maxHistory = 20;

  isHold = true;

  tracer = {
    START: 0,
    NORMAL: 1,
    DISABLED: 2,
    UNAVAILABLE: 3,
    TIMEOUT: 4,
    state: 0,
    watchId: null,
    start: function() {
      this.watchId = navigator.geolocation.watchPosition(this.success, this.error, {
        enableHighAccuracy: true,
        timeout: 60000
      });
      return this.setState(this.START);
    },
    stop: function() {
      if (!this.watchId) {
        navigator.geolocation.clearWatch(this.watchId);
      }
      return this.watchId = null;
    },
    setState: function(state) {
      if (this.state !== state) {
        this.state = state;
        return mapFSM.tracerChanged();
      }
    },
    success: function(position) {
      var latLng;
      latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
      currentPlace.marker.setVisible(true);
      currentPlace.marker.setPosition(latLng);
      currentPlace.marker.setRadius(position.coords.accuracy);
      currentPlace.address = '';
      if (!mapFSM.is(MapState.NORMAL)) {
        map.setCenter(latLng);
      }
      return tracer.setState(tracer.NORMAL);
    },
    error: function(error) {
      switch (error.code) {
        case error.PERMISSION_DENIED:
          tracer.stop();
          return tracer.setState(tracer.DISABLED);
        case error.POSITION_UNAVAILABLE:
          return tracer.setState(tracer.UNAVAILABLE);
        case error.TIMEOUT:
          return tracer.setState(tracer.TIMEOUT);
      }
    }
  };

  MapState = (function() {

    function MapState(name) {
      this.name = name;
    }

    MapState.DISABLED = new MapState('disabled');

    MapState.NORMAL = new MapState('normal');

    MapState.TRACE_START = new MapState('trace_start');

    MapState.TRACE_POSITION = new MapState('trace_position');

    MapState.UNAVAILABLE = new MapState('unavailable');

    MapState.TIMEOUT = new MapState('timout');

    MapState.prototype.update = function(fsm) {
      return this;
    };

    MapState.prototype.gpsClicked = function() {
      return this;
    };

    MapState.prototype.bookmarkClicked = function() {
      return this;
    };

    MapState.prototype.tracerChanged = function() {
      switch (tracer.state) {
        case tracer.DISABLED:
          return MapState.DISABLED;
        default:
          return this;
      }
    };

    return MapState;

  })();

  tracer2State = function() {
    switch (tracer.state) {
      case tracer.START:
        return MapState.TRACE_START;
      case tracer.NORMAL:
        return MapState.TRACE_POSITION;
      case tracer.DISABLED:
        return MapState.DISABLED;
      case tracer.UNAVAILABLE:
        return MapState.UNAVAILABLE;
      case tracer.TIMEOUT:
        return MapState.TIMEOUT;
      default:
        console.log('unknown tracer state');
        return this;
    }
  };

  MapState.DISABLED.update = function() {
    $gps.removeClass('btn-light').addClass('disabled');
    return this;
  };

  MapState.NORMAL.update = function() {
    $gps.removeClass('btn-light');
    return this;
  };

  MapState.NORMAL.gpsClicked = tracer2State;

  MapState.TRACE_START.update = function(fsm) {
    fsm.timerId = setInterval((function() {
      return $gps.toggleClass('btn-light');
    }), 250);
    return this;
  };

  MapState.TRACE_START.gpsClicked = function(fsm) {
    clearInterval(fsm.timerId);
    fsm.timerId = null;
    return MapState.NORMAL;
  };

  MapState.TRACE_START.tracerChanged = function(fsm) {
    clearInterval(fsm.timerId);
    fsm.timerId = null;
    return tracer2State();
  };

  MapState.TRACE_POSITION.update = function() {
    if (currentPlace.marker.getVisible()) {
      map.setCenter(currentPlace.marker.getPosition());
    }
    $gps.addClass('btn-light');
    return this;
  };

  MapState.TRACE_POSITION.gpsClicked = function() {
    return MapState.NORMAL;
  };

  MapState.TRACE_POSITION.tracerChanged = tracer2State;

  MapState.UNAVAILABLE.update = function(fsm) {
    fsm.timerId = setInterval((function() {
      return $gps.toggleClass('btn-light');
    }), 1000);
    return this;
  };

  MapState.UNAVAILABLE.gpsClicked = function(fsm) {
    clearInterval(fsm.timerId);
    fsm.timerId = null;
    return MapState.NORMAL;
  };

  MapState.UNAVAILABLE.tracerChanged = function(fsm) {
    clearInterval(fsm.timerId);
    fsm.timerId = null;
    return tracer2State();
  };

  MapState.TIMEOUT.update = function(fsm) {
    fsm.timerId = setInterval((function() {
      return $gps.toggleClass('btn-light');
    }), 2000);
    return this;
  };

  MapState.TIMEOUT.gpsClicked = MapState.UNAVAILABLE.gpsClicked;

  MapState.TIMEOUT.tracerChanged = function(fsm) {
    clearInterval(fsm.timerId);
    fsm.timerId = null;
    return tracer2State();
  };

  MapFSM = (function() {

    function MapFSM(state) {
      this.state = state;
      this.timerId = null;
    }

    MapFSM.prototype.is = function(state) {
      return this.state === state;
    };

    MapFSM.prototype.setState = function(state) {
      if (this.state === state) {
        return;
      }
      this.state = state;
      return this.state.update(this);
    };

    return MapFSM;

  })();

  _ref1 = MapState.prototype;
  for (name in _ref1) {
    method = _ref1[name];
    if (typeof method === 'function') {
      MapFSM.prototype[name] = (function(name) {
        return function() {
          return this.setState(this.state[name](this));
        };
      })(name);
    }
  }

  Place = (function() {

    Place.streetViewService = new google.maps.StreetViewService();

    Place.streetViewButtonWrapper = $('<div class="button-wrapper wrapper-left"></div>').on('click', function() {
      var sv, _ref2;
      if (placeContext.svLatLng != null) {
        $map.addClass('streetview');
        sv = map.getStreetView();
        sv.setPosition(placeContext.svLatLng);
        sv.setPov({
          heading: (_ref2 = map.getHeading()) != null ? _ref2 : 0,
          pitch: 0,
          zoom: 1
        });
        return sv.setVisible(true);
      }
    });

    Place.infoButtonWrapper = $('<div class="button-wrapper wrapper-right"></div>').on('click', function() {
      setInfoPage(placeContext, placeContext === droppedPlace);
      $('body').animate({
        scrollLeft: innerWidth
      }, 300);
      return scrollLeft = true;
    });

    function Place(marker, address) {
      var _this = this;
      this.marker = marker;
      this.address = address;
      google.maps.event.addListener(this.marker, 'click', function(event) {
        placeContext = _this;
        return _this.showInfoWindow();
      });
    }

    Place.prototype.setInfoWindow = function() {
      var $container;
      $container = $('<div>');
      $container.html("<table id=\"info-window\"><tr>\n    <td>\n        <button id=\"street-view\" class=\"btn btn-mini" + (this.svLatLng != null ? ' btn-primary' : '') + "\">\n            <i class=\"icon-user icon-white\"></i>\n        </button>\n    </td>\n    <td style=\"white-space: nowrap;\"><div style=\"max-width:160px;overflow:hidden;\">" + (this.marker.getTitle()) + "<br><span id=\"dropped-message\" style=\"font-size:10px\">" + this.address + "</span></div></td>\n    <td>\n        <button id=\"button-info\" class=\"btn btn-mini btn-light\">\n            <i class=\"icon-chevron-right icon-white\"></i>\n        </button>\n    </td>\n</tr></table>");
      return infoWindow.setContent($container.append(Place.streetViewButtonWrapper, Place.infoButtonWrapper)[0]);
    };

    Place.prototype.showInfoWindow = function() {
      var _this = this;
      this.setInfoWindow();
      infoWindow.open(map, this.marker);
      if (this.svLatLng == null) {
        Place.streetViewService.getPanoramaByLocation(placeContext.marker.getPosition(), 49, function(data, status) {
          if (status === google.maps.StreetViewStatus.OK) {
            _this.svLatLng = data.location.latLng;
            return $('#street-view').addClass('btn-primary');
          }
        });
      }
      if (!((this.address != null) && this.address !== '')) {
        return geocoder.geocode({
          latLng: this.marker.getPosition()
        }, function(result, status) {
          _this.address = status === google.maps.GeocoderStatus.OK ? result[0].formatted_address.replace(/日本, /, '') : getLocalizedString('No information');
          return _this.setInfoWindow();
        });
      }
    };

    Place.prototype.toObject = function() {
      var pos;
      pos = this.marker.getPosition();
      return {
        lat: pos.lat(),
        lng: pos.lng(),
        title: this.marker.getTitle(),
        address: this.address
      };
    };

    return Place;

  })();

  sum = function(array) {
    return array.reduce(function(a, b) {
      return a + b;
    });
  };

  mapSum = function(array, fn) {
    return array.map(fn).reduce(function(a, b) {
      return a + b;
    });
  };

  ordinal = function(n) {
    switch (n % 10) {
      case 1:
        return '1st';
      case 2:
        return '2nd';
      case 3:
        return '3rd';
      default:
        return n + 'th';
    }
  };

  if ((_ref2 = window.getRouteIndexMessage) == null) {
    window.getRouteIndexMessage = function(index, total) {
      return "" + (ordinal(index + 1)) + " of " + total + " Suggested Routes";
    };
  }

  if ((_ref3 = window.getDepartAtMessage) == null) {
    window.getDepartAtMessage = function(time) {
      return 'Departs at ' + time;
    };
  }

  if ((_ref4 = window.getArriveAtMessage) == null) {
    window.getArriveAtMessage = function(time) {
      return 'Arrives at ' + time;
    };
  }

  getLocalizedString = function(key) {
    var _ref5;
    if (typeof localizedStrings !== "undefined" && localizedStrings !== null) {
      return (_ref5 = localizedStrings[key]) != null ? _ref5 : key;
    } else {
      return key;
    }
  };

  setLocalExpressionInto = function(id, english) {
    return document.getElementById(id).lastChild.data = getLocalizedString(english);
  };

  localize = function() {
    var idWordPairs, key, value, _results;
    idWordPairs = {
      'replace-pin': 'Replace Pin',
      'print': 'Print',
      'traffic': 'Show Traffic',
      'panoramio': 'Show Panoramio',
      'roadmap': 'Standard',
      'satellite': 'Satellite',
      'panel': 'List',
      'hybrid': 'Hybrid',
      'clear': 'Clear',
      'map-title': 'Search',
      'done': 'Done',
      'edit': 'Edit',
      'versatile': 'Start',
      'origin-label': 'Start: ',
      'destination-label': 'End: ',
      'edit2': 'Edit',
      'search': 'Search',
      'route': 'Directions',
      'bookmark-message': 'Choose a bookmark to view on the map',
      'bookmark-edit': 'Edit',
      'bookmark-done': 'Done',
      'bookmark-title': 'Bookmarks',
      'bookmark': 'Bookmarks',
      'history': 'Recents',
      'contact': 'Contacts',
      'button-map': 'Map',
      'info-title': 'Info',
      'address-label': 'address',
      'to-here': 'Directions To Here',
      'from-here': 'Directions From Here',
      'delete-pin': 'Remove Pin',
      'add-into-contact': 'Add to Contacts',
      'send-place': 'Share Location',
      'add-bookmark': 'Add to Bookmarks',
      'add-bookmark-message': 'Type a name for the bookmark',
      'cancel-add-bookmark': 'Cancel',
      'add-bookmark-title': 'Add Bookmark',
      'save-bookmark': 'Save',
      'edit3': 'Edit',
      'directions-title': 'Directions'
    };
    document.title = getLocalizedString('Maps');
    document.getElementById('search-input').placeholder = getLocalizedString('Search or Address');
    _results = [];
    for (key in idWordPairs) {
      value = idWordPairs[key];
      _results.push(setLocalExpressionInto(key, value));
    }
    return _results;
  };

  saveMapStatus = function() {
    var pos;
    pos = map.getCenter();
    return localStorage['maps-map-status'] = JSON.stringify({
      lat: pos.lat(),
      lng: pos.lng(),
      zoom: map.getZoom()
    });
  };

  saveOtherStatus = function() {
    history.splice(maxHistory);
    return localStorage['maps-other-status'] = JSON.stringify({
      address: $addressField.val(),
      origin: $originField.val(),
      destination: $destinationField.val(),
      bookmarks: bookmarks.map(function(e) {
        return e.toObject();
      }),
      history: history
    });
  };

  secondToString = function(sec) {
    var day, hour, min, result;
    result = '';
    min = Math.floor(sec / 60);
    sec -= min * 60;
    hour = Math.floor(min / 60);
    min -= hour * 60;
    day = Math.floor(hour / 24);
    hour -= day * 24;
    result += day === 1 ? day + getLocalizedString('day') : day > 1 ? day + getLocalizedString('days') : '';
    if (day < 10) {
      result += hour === 1 ? hour + getLocalizedString('hour') : hour > 1 ? hour + getLocalizedString('hours') : '';
    }
    if (day === 0 && hour < 10) {
      result += min === 1 ? min + getLocalizedString('minute') : min > 1 ? min + getLocalizedString('minutes') : '';
    }
    return result;
  };

  meterToString = function(meter) {
    if (meter < 1000) {
      return meter + 'm';
    } else {
      return parseFloat((meter / 1000).toPrecision(2)) + 'km';
    }
  };

  getTravelMode = function() {
    return google.maps.TravelMode[$('#travel-mode > .btn-primary').attr('id').toUpperCase()];
  };

  getMapType = function() {
    return google.maps.MapTypeId[$('#map-type > .btn-primary').attr('id').toUpperCase()];
  };

  setSearchResult = function(place) {
    var latLng, _ref5;
    directionsRenderer.setMap(null);
    latLng = currentPlace.marker.getPosition();
    updateField($originField, "" + (latLng.lat()) + ", " + (latLng.lng()));
    updateField($destinationField, place.formatted_address);
    mapFSM.setState(MapState.NORMAL);
    if (__indexOf.call(place.geometry, 'viewport') >= 0 && (place.geometry.viewport != null)) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
    }
    searchPlace.address = place.formatted_address;
    searchPlace.marker.setPosition(place.geometry.location);
    searchPlace.marker.setTitle((_ref5 = place.name) != null ? _ref5 : $addressField.val());
    searchPlace.marker.setVisible(true);
    searchPlace.marker.setAnimation(google.maps.Animation.DROP);
    return placeContext = searchPlace;
  };

  setRouteMap = function() {
    var travelMode;
    travelMode = getTravelMode();
    trafficLayer.setMap(travelMode === google.maps.TravelMode.DRIVING ? map : null);
    transitLayer.setMap(travelMode === google.maps.TravelMode.TRANSIT ? map : null);
    bicycleLayer.setMap(travelMode === google.maps.TravelMode.BICYCLING ? map : null);
    if (getMapType() === google.maps.MapTypeId.ROADMAP) {
      if (travelMode === google.maps.TravelMode.WALKING || travelMode === google.maps.TravelMode.BICYCLING) {
        return map.setMapTypeId(google.maps.MapTypeId.TERRAIN);
      } else {
        return map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
      }
    }
  };

  searchAddress = function(fromHistory) {
    var address;
    address = $addressField.val();
    if (!((address != null) && address !== '')) {
      return;
    }
    infoWindow.close();
    searchPlace.marker.setVisible(false);
    if (!fromHistory) {
      history.unshift({
        type: 'search',
        address: address
      });
      saveOtherStatus();
    }
    if (/^[a-z]+:\/\//.test(address)) {
      kmlLayer = new google.maps.KmlLayer(address, {
        map: map
      });
      return google.maps.event.addListener(kmlLayer, 'status_changed', function() {
        if (kmlLayer.getStatus() === google.maps.KmlLayerStatus.OK) {
          return;
        }
        switch (kmlLayer.getStatus()) {
          case google.maps.KmlLayerStatus.DOCUMENT_NOT_FOUND:
            alert('DOCUMENT_NOT_FOUND');
            break;
          case google.maps.KmlLayerStatus.DOCUMENT_TOO_LARGE:
            alert('DOCUMENT_TOO_LARGE');
            break;
          case google.maps.KmlLayerStatus.FETCH_ERROR:
            alert('FETCH_ERROR');
            break;
          case google.maps.KmlLayerStatus.INVALID_DOCUMENT:
            alert('INVALID_DOCUMENT');
            break;
          case google.maps.KmlLayerStatus.INVALID_REQUEST:
            alert('INVALID_REQUEST');
            break;
          case google.maps.KmlLayerStatus.LIMITS_EXCEEDED:
            alert('LIMITS_EXCEEDED');
            break;
          case google.maps.KmlLayerStatus.TIMED_OUT:
            alert('TIMED_OUT');
            break;
          case google.maps.KmlLayerStatus.UNKNOWN:
            alert('UNKNOWN');
        }
        kmlLayer.setMap(null);
        return kmlLayer = null;
      });
    } else {
      return geocoder.geocode({
        address: address
      }, function(result, status) {
        switch (status) {
          case google.maps.GeocoderStatus.OK:
            return setSearchResult(result[0]);
          case google.maps.GeocoderStatus.ZERO_RESULTS:
            return alert(getLocalizedString('No Results Found'));
          default:
            return alert(status);
        }
      });
    }
  };

  updateMessage = function() {
    var distance, duration, index, message, result, route, summary;
    if (directionsRenderer.getDirections() == null) {
      return;
    }
    index = directionsRenderer.getRouteIndex();
    result = directionsRenderer.getDirections();
    route = result.routes[index];
    message = '';
    if (result.routes.length > 1) {
      message += getRouteIndexMessage(index, result.routes.length) + '<br>';
    }
    if (getTravelMode() === google.maps.TravelMode.TRANSIT) {
      summary = getDepartAtMessage(route.legs[0].departure_time.text);
      summary += '<br>';
      summary += getArriveAtMessage(route.legs[route.legs.length - 1].arrival_time.text);
    } else {
      distance = mapSum(result.routes[index].legs, function(e) {
        return e.distance.value;
      });
      duration = mapSum(result.routes[index].legs, function(e) {
        return e.duration.value;
      });
      summary = "" + (secondToString(duration)) + " - " + (meterToString(distance)) + " - " + result.routes[index].summary;
      if (summary.length > innerWidth / parseInt($message.css('font-size'))) {
        summary = "" + result.routes[index].summary + "<br>" + (secondToString(duration)) + " - " + (meterToString(distance));
      }
    }
    message += summary;
    return $message.html(message);
  };

  searchDirections = function(fromHistory) {
    var destination, origin, travelMode;
    if (fromHistory == null) {
      fromHistory = false;
    }
    origin = $originField.val();
    destination = $destinationField.val();
    if (!((origin != null) && origin !== '' && (destination != null) && destination !== '')) {
      return;
    }
    infoWindow.close();
    if (!fromHistory) {
      history.unshift({
        type: 'route',
        origin: origin,
        destination: destination
      });
      saveOtherStatus();
    }
    travelMode = getTravelMode();
    return searchDirections.service.route({
      destination: destination,
      origin: origin,
      provideRouteAlternatives: getTravelMode() !== google.maps.TravelMode.WALKING,
      travelMode: travelMode
    }, function(result, status) {
      var mode;
      switch (status) {
        case google.maps.DirectionsStatus.OK:
          directionsRenderer.setMap(map);
          directionsRenderer.setDirections(result);
          return updateMessage();
        default:
          directionsRenderer.setMap(null);
          mode = $('#travel-mode').children('.btn-primary').attr('id');
          mode = mode[0].toUpperCase() + mode.substr(1);
          $message.html(getLocalizedString(mode + ' directions could not be found between these locations'));
          return alert(getLocalizedString('Directions Not Available\nDirections could not be found between these locations.') + ("(" + status + ")"));
      }
    });
  };

  searchDirections.service = new google.maps.DirectionsService();

  navigate = function(str) {
    var lengths, route, step, steps, _ref5;
    route = (_ref5 = directionsRenderer.getDirections()) != null ? _ref5.routes[directionsRenderer.getRouteIndex()] : void 0;
    if (route == null) {
      return;
    }
    switch (str) {
      case 'start':
        navigate.leg = 0;
        navigate.step = 0;
        $('#navi-header2').css('display', 'block');
        naviMarker.setVisible(true);
        break;
      case 'next':
        if (navigate.step < route.legs[navigate.leg].steps.length - 1) {
          navigate.step += 1;
        } else if (navigate.leg < route.legs.length - 1) {
          navigate.leg += 1;
          navigate.step = 0;
        }
        break;
      case 'previous':
        if (navigate.step > 0) {
          navigate.step -= 1;
        } else if (navigate.leg > 0) {
          navigate.leg -= 1;
          navigate.step = route.legs[navigate.leg].steps.legth - 1;
        }
    }
    map.setZoom(15);
    step = route.legs[navigate.leg].steps[navigate.step];
    naviMarker.setPosition(step.start_location);
    map.setCenter(step.start_location);
    lengths = route.legs.map(function(e) {
      return e.steps.length;
    });
    steps = navigate.step + (navigate.leg === 0 ? 0 : sum(lengths.slice(0, navigate.leg)));
    $('#numbering').text((steps + 1) + '/' + mapSum(route.legs, function(e) {
      return e.steps.length;
    }));
    return $message.html(step.instructions);
  };

  navigate.leg = null;

  navigate.step = null;

  updateField = function($field, str) {
    return $field.val(str).siblings('.btn-bookmark').css('display', str === '' ? 'block' : 'none');
  };

  setInfoPage = function(place, dropped) {
    var position, title, _ref5, _ref6;
    $('#info-marker img:first-child').attr('src', (_ref5 = (_ref6 = place.marker.getIcon()) != null ? _ref6.url : void 0) != null ? _ref5 : 'http://maps.google.co.jp/mapfiles/ms/icons/red-dot.png');
    title = place.marker.getTitle();
    position = place.marker.getPosition();
    $('#info-name').text(title);
    $('#bookmark-name input[name="bookmark-name"]').val(dropped ? place.address : title);
    $('#info-address').text(place.address);
    return $('#send-place').attr('href', "mailto:?subject=" + title + "&body=<a href=\"https://maps.google.co.jp/maps?q=" + (position.lat()) + "," + (position.lng()) + "\">" + title + "</a>");
  };

  generateBookmarkList = function() {
    var e, i, list, _i, _len;
    list = "<tr><td data-object-name=\"currentPlace\">" + (getLocalizedString('Current Location')) + "</td></tr>";
    if (droppedPlace.marker.getVisible()) {
      list += "<tr><td data-object-name=\"droppedPlace\">" + (getLocalizedString('Dropped Pin')) + "</td></tr>";
    }
    for (i = _i = 0, _len = bookmarks.length; _i < _len; i = ++_i) {
      e = bookmarks[i];
      list += "<tr><td data-object-name=\"bookmarks[" + i + "]\">" + (e.marker.getTitle()) + "</td></tr>";
    }
    list += Array(Math.max(1, Math.floor(innerHeight / pinRowHeight) - bookmarks.length)).join('<tr><td></td></tr>');
    return $pinList.html(list);
  };

  generateHistoryList = function() {
    var e, i, list, print, _i, _len;
    print = function(e) {
      switch (e.type) {
        case 'search':
          return getLocalizedString('Search: ') + e.address;
        case 'route':
          return getLocalizedString('Start: ') + e.origin + '<br>' + getLocalizedString('End: ') + e.destination;
      }
    };
    list = '';
    for (i = _i = 0, _len = history.length; _i < _len; i = ++_i) {
      e = history[i];
      list += "<tr><td data-object-name=\"history[" + i + "]\">" + (print(e)) + "</td></tr>";
    }
    list += Array(Math.max(1, Math.floor(innerHeight / pinRowHeight) - history.length)).join('<tr><td></td></tr>');
    return $pinList.html(list);
  };

  initializeGoogleMaps = function() {
    var mapOptions, mapStatus;
    mapOptions = {
      mapTypeId: getMapType(),
      disableDefaultUI: true
    };
    if (localStorage['maps-map-status'] != null) {
      mapStatus = JSON.parse(localStorage['maps-map-status']);
      mapOptions.center = new google.maps.LatLng(mapStatus.lat, mapStatus.lng);
      mapOptions.zoom = mapStatus.zoom;
    } else {
      mapOptions.center = new google.maps.LatLng(35.660389, 139.729225);
      mapOptions.zoom = 14;
    }
    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    map.setTilt(45);
    mapFSM = new MapFSM(MapState.NORMAL);
    infoWindow = new MobileInfoWindow({
      maxWidth: Math.floor(innerWidth * 0.9)
    });
    geocoder = new google.maps.Geocoder();
    autoAddressField = new google.maps.places.Autocomplete($('#address input[name="address"]')[0]);
    autoAddressField.bindTo('bounds', map);
    google.maps.event.addListener(autoAddressField, 'place_changed', function() {
      var place;
      place = autoAddressField.getPlace();
      if ('geometry' in place) {
        return setSearchResult(place);
      }
    });
    autoOriginField = new google.maps.places.Autocomplete($('#origin input[name="origin"]')[0]);
    autoOriginField.bindTo('bounds', map);
    autoDestinationField = new google.maps.places.Autocomplete($('#destination input[name="destination"]')[0]);
    autoDestinationField.bindTo('bounds', map);
    directionsRenderer = new google.maps.DirectionsRenderer({
      hideRouteList: false,
      infoWindow: infoWindow,
      map: map,
      panel: $('#directions-panel')[0]
    });
    google.maps.event.addListener(directionsRenderer, 'directions_changed', function() {
      navigate.leg = null;
      navigate.step = null;
      $('#navi-header2').css('display', 'none');
      return naviMarker.setVisible(false);
    });
    currentPlace = new Place(new MarkerWithCircle({
      flat: true,
      icon: new google.maps.MarkerImage('img/bluedot.png', null, null, new google.maps.Point(8, 8), new google.maps.Size(17, 17)),
      map: map,
      optimized: false,
      position: mapOptions.center,
      title: getLocalizedString('Current Location'),
      visible: false
    }), '');
    droppedPlace = new Place(new google.maps.Marker({
      animation: google.maps.Animation.DROP,
      map: map,
      icon: new google.maps.MarkerImage(PURPLE_DOT_IMAGE),
      shadow: new google.maps.MarkerImage(MSMARKER_SHADOW, null, null, new google.maps.Point(DEFAULT_ICON_SIZE / 2, DEFAULT_ICON_SIZE)),
      position: mapOptions.center,
      title: getLocalizedString('Dropped Pin'),
      visible: false
    }), '');
    searchPlace = new Place(new google.maps.Marker({
      animation: google.maps.Animation.DROP,
      map: map,
      position: mapOptions.center,
      visible: false
    }), '');
    naviMarker = new google.maps.Marker({
      flat: true,
      icon: new google.maps.MarkerImage('img/bluedot.png', null, null, new google.maps.Point(8, 8), new google.maps.Size(17, 17)),
      map: map,
      optimized: false,
      visible: false
    });
    google.maps.event.addListener(map, 'click', function(event) {
      var $infoWindow, position, xy, _ref5, _ref6;
      if (!isHold) {
        infoWindow.close();
        return;
      }
      $infoWindow = $('.info-window');
      if ($infoWindow.length > 0) {
        xy = infoWindow.getProjection().fromLatLngToDivPixel(event.latLng);
        position = $infoWindow.position();
        if (((position.left <= (_ref5 = xy.x) && _ref5 <= position.left + $infoWindow.outerWidth(true))) && ((position.top <= (_ref6 = xy.y) && _ref6 <= position.top + $infoWindow.outerHeight(true)))) {
          return;
        }
      }
      infoWindow.close();
      droppedPlace.address = '';
      droppedPlace.svLatLng = null;
      droppedPlace.marker.setPosition(event.latLng);
      droppedPlace.marker.setVisible(true);
      droppedPlace.marker.setAnimation(google.maps.Animation.DROP);
      return placeContext = droppedPlace;
    });
    google.maps.event.addListener(droppedPlace.marker, 'animation_changed', function() {
      if (!(this.getAnimation() != null)) {
        return droppedPlace.showInfoWindow();
      }
    });
    google.maps.event.addListener(searchPlace.marker, 'animation_changed', function() {
      if (!(this.getAnimation() != null)) {
        return searchPlace.showInfoWindow();
      }
    });
    google.maps.event.addListener(map, 'dragstart', function() {
      return mapFSM.setState(MapState.NORMAL);
    });
    google.maps.event.addListener(map, 'center_changed', saveMapStatus);
    google.maps.event.addListener(map, 'zoom_changed', saveMapStatus);
    google.maps.event.addListener(map.getStreetView(), 'visible_changed', function() {
      if (!this.getVisible()) {
        return $map.removeClass('streetview');
      }
    });
    trafficLayer = new google.maps.TrafficLayer();
    transitLayer = new google.maps.TransitLayer();
    bicycleLayer = new google.maps.BicyclingLayer();
    panoramioLayer = new google.maps.panoramio.PanoramioLayer({
      suppressInfoWindows: true
    });
    return google.maps.event.addListener(panoramioLayer, 'click', function(event) {
      infoWindow.setPosition(event.latLng);
      infoWindow.setContent(event.infoWindowHtml);
      return infoWindow.open(map);
    });
  };

  initializeDOM = function() {
    var $bookmarkPage, $edit, $mapType, $naviHeader, $option, $panoramio, $route, $routeSearchFrame, $search, $traffic, $travelMode, $versatile, backToMap, e, openRouteForm, otherStatus, _i, _len, _ref5, _ref6, _ref7;
    $map = $('#map');
    $gps = $('#gps');
    $addressField = $('#address input[name="address"]');
    $originField = $('#origin input[name="origin"]');
    $destinationField = $('#destination input[name="destination"]');
    $message = $('#message');
    $pinList = $('#pin-list');
    pinRowHeight = $('#pin-list tr').height();
    new NoClickDelay($('#container')[0]);
    document.addEventListener('touchmove', function(event) {
      return event.preventDefault();
    });
    $('#pin-list-frame, #info, #directions-panel').on('touchmove', function(event) {
      return event.stopPropagation();
    });
    $('input[type="search"], input[type="text"]').on('textInput', function() {
      var e, event, _i, _len, _ref5, _results;
      _ref5 = ['keydown', 'keyup'];
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        event = _ref5[_i];
        e = document.createEvent('KeyboardEvent');
        e.initKeyboardEvent(event, true, true, window, 'Enter', 0, '');
        _results.push(this.dispatchEvent(e));
      }
      return _results;
    });
    if (localStorage['maps-other-status'] != null) {
      otherStatus = JSON.parse(localStorage['maps-other-status']);
      if ((otherStatus.address != null) && otherStatus.address !== '') {
        updateField($addressField, otherStatus.address);
      }
      if ((otherStatus.origin != null) && otherStatus.origin !== '') {
        updateField($originField, otherStatus.origin);
      }
      if ((otherStatus.destination != null) && otherStatus.destination !== '') {
        updateField($destinationField, otherStatus.destination);
      }
      _ref6 = (_ref5 = otherStatus.bookmarks) != null ? _ref5 : [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        e = _ref6[_i];
        bookmarks.push(new Place(new google.maps.Marker({
          map: map,
          position: new google.maps.LatLng(e.lat, e.lng),
          title: e.title,
          visible: false
        }), e.address));
      }
      history = (_ref7 = otherStatus.history) != null ? _ref7 : [];
    }
    localize();
    $(document.body).css('display', 'block');
    window.scrollTo(0, 0);
    if (/iPhone/.test(navigator.userAgent) && /Safari/.test(navigator.userAgent)) {
      $('html, body').height(innerHeight);
    }
    window.addEventListener('orientationchange', function() {
      return document.body.scrollLeft = scrollLeft ? innerWidth : 0;
    });
    $map.on('touchstart', function() {
      isHold = false;
      return setTimeout((function() {
        return isHold = true;
      }), 500);
    });
    $('.search-query').on('keyup', function() {
      var $this;
      $this = $(this);
      if ($this.val() === '') {
        return $this.siblings('.btn-bookmark').css('display', 'block');
      } else {
        return $this.siblings('.btn-bookmark').css('display', 'none');
      }
    });
    $('#clear, .btn-reset').on('mousedown', function(event) {
      return event.preventDefault();
    });
    $('.btn-reset').on('click', function() {
      return $(this).siblings('.btn-bookmark').css('display', 'block');
    });
    $('#clear').on('click', function() {
      return $('#address .btn-bookmark').css('display', 'block');
    });
    $gps.on('click', function() {
      return mapFSM.gpsClicked();
    });
    $('input').on('blur', function() {
      var left;
      left = document.body.scrollLeft;
      return window.scrollTo(left, 0);
    });
    $addressField.on('focus', function() {
      return $('#search-header').css('top', '0');
    });
    $addressField.on('blur', function() {
      return $('#search-header').css('top', '');
    });
    $('#search-header, #route-search-frame').on('webkitTransitionEnd', function() {
      var $this;
      $this = $(this);
      return $('.pac-container:visible').css('top', $this.offset().top + $this.outerHeight(true) + 'px');
    });
    $('#address').on('submit', function() {
      searchAddress(false);
      $addressField.blur();
      return false;
    });
    $addressField.on('keyup', function() {
      return setLocalExpressionInto('done', $(this).val() === '' ? 'Done' : 'Cancel');
    });
    $('#clear, #address .btn-reset').on('click', function() {
      setLocalExpressionInto('done', 'Done');
      searchPlace.marker.setVisible(false);
      if (placeContext === searchPlace) {
        return infoWindow.close();
      }
    });
    $naviHeader = $('#navi-header1');
    $search = $('#search');
    $search.on('click', function() {
      trafficLayer.setMap(null);
      transitLayer.setMap(null);
      bicycleLayer.setMap(null);
      if (getMapType() === google.maps.MapTypeId.ROADMAP) {
        map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
      }
      directionsRenderer.setMap(null);
      naviMarker.setVisible(false);
      $route.removeClass('btn-primary');
      $search.addClass('btn-primary');
      return $naviHeader.css('display', 'none');
    });
    $route = $('#route');
    $route.on('click', function() {
      $search.removeClass('btn-primary');
      $route.addClass('btn-primary');
      $naviHeader.css('display', 'block');
      setRouteMap();
      return directionsRenderer.setMap(map);
    });
    $edit = $('#edit');
    $versatile = $('#versatile');
    $routeSearchFrame = $('#route-search-frame');
    openRouteForm = function() {
      setLocalExpressionInto('edit', 'Cancel');
      setLocalExpressionInto('versatile', 'Route');
      $('#navi-header2').css('display', 'none');
      $routeSearchFrame.css('top', '0px');
      return $destinationField.focus();
    };
    $edit.on('click', function() {
      if ($edit.text().replace(/^\s*|\s*$/, '') === getLocalizedString('Edit')) {
        return openRouteForm();
      } else {
        setLocalExpressionInto('edit', 'Edit');
        setLocalExpressionInto('versatile', 'Start');
        if ((navigate.leg != null) && (navigate.step != null)) {
          $('#navi-header2').css('display', 'block');
        }
        return $routeSearchFrame.css('top', '');
      }
    });
    $('#edit2').on('click', function() {
      return $edit.trigger('click');
    });
    $('#switch').on('click', function() {
      var tmp;
      tmp = $destinationField.val();
      updateField($destinationField, $originField.val());
      updateField($originField, tmp);
      return saveOtherStatus();
    });
    $('#origin, #destination').on('submit', function() {
      return false;
    });
    $originField.on('change', saveOtherStatus);
    $destinationField.on('change', saveOtherStatus);
    $travelMode = $('#travel-mode');
    $travelMode.children().on('click', function() {
      var $this;
      $this = $(this);
      if ($this.hasClass('btn-primary')) {
        return;
      }
      $travelMode.children().removeClass('btn-primary');
      $this.addClass('btn-primary');
      return setRouteMap();
    });
    $versatile.on('click', function() {
      switch ($versatile.text().replace(/^\s*|\s*$/, '')) {
        case getLocalizedString('Route'):
          setLocalExpressionInto('edit', 'Edit');
          setLocalExpressionInto('versatile', 'Start');
          $routeSearchFrame.css('top', '');
          return searchDirections(false);
        case getLocalizedString('Start'):
          return navigate('start');
      }
    });
    $('#cursor-left').on('click', function() {
      return navigate('previous');
    });
    $('#cursor-right').on('click', function() {
      return navigate('next');
    });
    backToMap = function() {
      $map.css('top', '');
      $map.css('bottom', '');
      $('#directions-panel').css('top', '');
      $('#directions-panel').css('bottom', '');
      return $option.removeClass('btn-primary');
    };
    $option = $('#option');
    $option.on('click', function() {
      $('#option-page').css('display', 'block');
      if ($option.hasClass('btn-primary')) {
        return backToMap();
      } else {
        $map.css('top', $('#search-header .toolbar').outerHeight(true) - $('#option-page').outerHeight(true) + 'px');
        $map.css('bottom', $('#footer').outerHeight(true) + $('#option-page').outerHeight(true) + 'px');
        $('#directions-panel').css('top', $('#directions-header').outerHeight(true) - $('#option-page').outerHeight(true) + 'px');
        $('#directions-panel').css('bottom', $('#footer').outerHeight(true) + $('#option-page').outerHeight(true) + 'px');
        return $option.addClass('btn-primary');
      }
    });
    $mapType = $('#map-type');
    $mapType.children().on('click', function() {
      var $this;
      $this = $(this);
      if ($this.hasClass('btn-primary')) {
        if (kmlLayer != null) {
          kmlLayer.setMap(null);
        }
        return;
      }
      $mapType.children().removeClass('btn-primary');
      $this.addClass('btn-primary');
      if ($this.attr('id') === 'panel') {
        $('#directions-window').css('display', 'block');
      } else {
        map.setMapTypeId(getMapType());
        $('#directions-window').css('display', 'none');
        updateMessage();
      }
      return backToMap();
    });
    $traffic = $('#traffic');
    $traffic.on('click', function() {
      if ($traffic.text() === getLocalizedString('Show Traffic')) {
        trafficLayer.setMap(map);
        setLocalExpressionInto('traffic', 'Hide Traffic');
      } else {
        trafficLayer.setMap(null);
        setLocalExpressionInto('traffic', 'Show Traffic');
      }
      return backToMap();
    });
    $panoramio = $('#panoramio');
    $panoramio.on('click', function() {
      if ($panoramio.text() === getLocalizedString('Show Panoramio')) {
        panoramioLayer.setMap(map);
        setLocalExpressionInto('panoramio', 'Hide Panoramio');
      } else {
        panoramioLayer.setMap(null);
        setLocalExpressionInto('panoramio', 'Show Panoramio');
      }
      return backToMap();
    });
    $('#replace-pin').on('click', function() {
      droppedPlace.marker.setPosition(map.getCenter());
      droppedPlace.marker.setVisible(true);
      return backToMap();
    });
    $('#print').on('click', function() {
      setTimeout(window.print, 0);
      return backToMap();
    });
    $('#button-map').on('click', function() {
      $('body').animate({
        scrollLeft: 0
      }, 300);
      return scrollLeft = false;
    });
    $bookmarkPage = $('#bookmark-page');
    $('.btn-bookmark').on('click', function() {
      var ancestor;
      mapFSM.bookmarkClicked();
      ancestor = $(this).parent();
      while (ancestor.size() > 0 && ancestor[0].nodeName !== 'FORM') {
        ancestor = ancestor.parent();
      }
      bookmarkContext = ancestor.attr('id');
      generateBookmarkList();
      return $bookmarkPage.css('bottom', '0');
    });
    $('#bookmark-done').on('click', function() {
      return $bookmarkPage.css('bottom', '-100%');
    });
    $('#pin-list').on('click', 'td', function() {
      var item, latLng, place;
      name = $(this).data('object-name');
      if (!((name != null) && name !== '')) {
        return;
      }
      if (/history/.test(name)) {
        item = eval(name);
        switch (item.type) {
          case 'search':
            updateField($addressField, item.address);
            $search.trigger('click');
            searchAddress(true);
            break;
          case 'route':
            updateField($originField, item.origin);
            updateField($destinationField, item.destination);
            $route.trigger('click');
            searchDirections(true);
        }
      } else {
        place = eval(name);
        switch (bookmarkContext) {
          case 'address':
            map.getStreetView().setVisible(false);
            if (place === currentPlace) {
              mapFSM.setState(MapState.TRACE_POSITION);
            } else {
              mapFSM.setState(MapState.NORMAL);
              if (place !== droppedPlace) {
                updateField($addressField, place.address);
              }
              place.marker.setVisible(true);
              map.setCenter(place.marker.getPosition());
              placeContext = place;
              place.showInfoWindow();
            }
            break;
          case 'origin':
            updateField($originField, place === currentPlace ? (latLng = place.getPosition(), "" + (latLng.lat()) + ", " + (latLng.lng())) : place.address);
            break;
          case 'destination':
            updateField($destinationField, place === currentPlace ? (latLng = place.getPosition(), "" + (latLng.lat()) + ", " + (latLng.lng())) : place.address);
        }
      }
      return $bookmarkPage.css('bottom', '-100%');
    });
    $('#add-bookmark').on('click', function() {
      return $('#add-bookmark-page').css('top', '0');
    });
    $('#cancel-add-bookmark').on('click', function() {
      return $('#add-bookmark-page').css('top', '');
    });
    $('#delete-pin').on('click', function() {
      var index;
      if (placeContext === droppedPlace) {
        droppedPlace.marker.setVisible(false);
      } else {
        index = bookmarks.indexOf(placeContext);
        bookmarks.splice(index, 1);
        saveOtherStatus();
        placeContext.marker.setMap(null);
      }
      infoWindow.close();
      return $('#container').css('right', '');
    });
    $('#bookmark-name').on('submit', function() {
      $('#bookmark-name input[name="bookmark-name"]').blur();
      $('#save-bookmark').trigger('click');
      return false;
    });
    $('#save-bookmark').on('click', function() {
      var place;
      place = new Place(new google.maps.Marker({
        map: map,
        position: placeContext.marker.getPosition(),
        title: $('#bookmark-name input[name="bookmark-name"]').val()
      }), $('#info-address').text());
      bookmarks.push(place);
      saveOtherStatus();
      place.showInfoWindow();
      $('#add-bookmark-page').css('top', '');
      return $('#container').css('right', '');
    });
    $('#nav-bookmark button').on('click', function() {
      var $this;
      $this = $(this);
      $('#nav-bookmark button').removeClass('btn-primary');
      $this.addClass('btn-primary');
      switch ($this.attr('id')) {
        case 'bookmark':
          setLocalExpressionInto('bookmark-message', 'Choose a bookmark to view on the map');
          setLocalExpressionInto('bookmark-edit', 'Edit');
          $('#bookmark-edit').addClass('disabled');
          return generateBookmarkList();
        case 'history':
          setLocalExpressionInto('bookmark-message', 'Choose a recent search');
          setLocalExpressionInto('bookmark-edit', 'Clear');
          $('#bookmark-edit').removeClass('disabled');
          return generateHistoryList();
      }
    });
    $('#bookmark-edit').on('click', function() {
      switch ($(this).text()) {
        case getLocalizedString('Clear'):
          if (confirm(getLocalizedString('Clear All Recents'))) {
            history = [];
            return generateHistoryList();
          }
      }
    });
    $('#to-here').on('click', function() {
      updateField($destinationField, placeContext.address);
      $route.trigger('click');
      $('#container').css('right', '');
      return openRouteForm();
    });
    return $('#from-here').on('click', function() {
      updateField($originField, placeContext.address);
      $route.trigger('click');
      $('#container').css('right', '');
      return openRouteForm();
    });
  };

  window.app = {
    tracer: tracer,
    initializeDOM: initializeDOM,
    initializeGoogleMaps: initializeGoogleMaps,
    saveMapStatus: saveMapStatus,
    saveOtherStatus: saveOtherStatus
  };

}).call(this);
